format_version: "13"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other
meta:
  bitrise.io:
    stack: linux-docker-android-22.04
    machine_type_id: g2.linux.medium

app:
  envs:
  - PANDOC_VERSION: "3.6.2"
  - MAVEN_VERSION: "3.9.9"
    # These are needed for the E2E test assertion logic
  - WORKSPACE_SLUG: 322a005426441b60
  - MONOLITH_API_PAT: $BITRISE_BUILD_CACHE_AUTH_TOKEN
  - TRIGGERED_BUILD_SLUG: $BITRISE_BUILD_SLUG

workflows:
  release:
    description: Creates Linux and Darwin binaries, then publishes a GitHub release
    triggers:
      tag:
      - name:
          regex: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
    envs:
    - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        title: asdf use latest go
        inputs:
        - content: |-
            #!/usr/bin/env bash

            asdf install golang 1.24.3
            asdf global golang 1.24.3
    - script:
        title: Install Goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            GOBIN=/usr/local/bin/ go install github.com/goreleaser/goreleaser/v2@latest
    - bundle::generate_gradle_verification_reference: { }
    - bundle::check_gradle_verification_reference: { }
    - script:
        title: Goreleaser (create binaries + publish to GH)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release
    - script:
        title: Authenticate to GCP
        inputs:
          - content: |-
              #!/bin/bash
              set -euxo pipefail
              KEY_FILE_PATH=$(mktemp -d)/keyfile.json
              echo "${GAR_SERVICE_ACCOUNT_B64}" | base64 --decode > ${KEY_FILE_PATH}
              gcloud auth activate-service-account --key-file=${KEY_FILE_PATH}
    - script:
        title: Upload release artifacts to GAR
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -eo pipefail

            DIST_DIR="dist"
            if [[ ! -d "$DIST_DIR" ]]; then
              echo "Directory $DIST_DIR does not exist."
              exit 1
            fi
            tree -L 2 dist

            tag="${BITRISE_GIT_TAG#v}" # Remove the v from the tag
            if [[ -z "$tag" ]]; then
              echo "BITRISE_GIT_TAG is not set. Exiting."
              exit 1
            fi

            echo "Uploading with tag: $tag"

            filenames=("bitrise-build-cache_${tag}_darwin_amd64.tar.gz"
                      "bitrise-build-cache_${tag}_linux_amd64.tar.gz"
                      "bitrise-build-cache_${tag}_darwin_arm64.tar.gz"
                      "bitrise-build-cache_${tag}_linux_arm64.tar.gz")
            for filename in "${filenames[@]}"; do
              if [[ ! -f "$DIST_DIR/$filename" ]]; then
                echo "File $DIST_DIR/$filename does not exist."
                exit 1
              fi
              echo "Uploading $filename to GAR..."

              package_name="${filename/_${tag}/}" # Files will be versioned

              gcloud artifacts generic upload \
                --project=ip-build-cache-prod \
                --source="$DIST_DIR/$filename" \
                --package="$package_name" \
                --version="$tag" \
                --location=us-central1 \
                --repository=build-cache-cli-releases
            done

            echo "Uploaded artifacts to GAR."
    - deploy-to-bitrise-io@2: {}
    - script:
        title: Update step
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            ./scripts/update_step.sh
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              Build Cache for Gradle step update PR is ready! :tada: :rocket: :bitrise:

              Check PR here: $PR_URL
          - emoji: ":gradle:"
          - color: "#08a045"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if PR opened
        run_if: '{{ getenv "PR_URL" | ne "" }}'
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              CLI release failed! :gopher_lift: :rotating_light:

              Check build here: $BITRISE_BUILD_URL
          - emoji: ":rotating_light:"
          - color: "#ee003b"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if failed
        run_if: ".IsBuildFailed"
    meta:
      bitrise.io:
        machine_type_id: g2.mac.medium
        stack: osx-xcode-edge
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - go-list@1: {}
    - script@1:
        title: golangci-lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            make lint
    - go-test@1: {}
    - bundle::generate_gradle_verification_reference: { }
    - bundle::check_gradle_verification_reference: { }
    - deploy-to-bitrise-io@2:
        inputs:
          - deploy_path: "$GRADLE_VERIFICATION_REF_TARGET_PATH"
    meta:
      bitrise.io:
        machine_type_id: g2.mac.medium
        stack: osx-xcode-edge

  generate_gradle_verification:
    steps:
    - bundle::generate_gradle_verification_reference: { }

  generate_and_commit_dependency_matrix:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8:
        inputs:
          - fetch_tags: "yes"
          - shallow_clone: "false"
          - clone_depth: "-1"
    - bundle::generate_and_commit_dependency_matrix: {}
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              Dependency matrix generation failed! :matrix-code: :rotating_light:

              Check build here: $BITRISE_BUILD_URL
          - emoji: ":rotating_light:"
          - color: "#ee003b"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if failed
        run_if: ".IsBuildFailed"

  update_plugins:
    envs:
      - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN
    steps:
      - activate-ssh-key@4:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8:
          inputs:
          - fetch_tags: "yes"
          - shallow_clone: "false"
          - clone_depth: "-1"
      - apt-get-install:
          inputs:
            - packages: libxml2-utils
      - script:
          title: Ensure we're on main
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                git fetch origin
                if [[ "$BITRISE_GIT_BRANCH" != "main" ]]; then
                  git checkout main
                  git pull origin main
                fi
      - script:
          title: Update plugins with latest version
          inputs:
            - content: |
                bash ./scripts/update_plugins.sh
      - bundle::generate_gradle_verification_reference: {}
      - script:
          title: Commit updated plugins and open PR
          inputs:
            - content: |
                set -ex

                # Check for existing PR with the same title
                existing_pr=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/bitrise-io/bitrise-build-cache-cli/pulls?state=open" | jq -r ".[] | select(.title == \"chore: Update Gradle plugins\") | .html_url")

                if [ -n "$existing_pr" ]; then
                  echo "A pull request with this title already exists: $existing_pr"
                  exit 0
                fi

                if [ -n "$(git status --porcelain)" ]; then
                  git branch -D update-plugins || true
                  git checkout -b update-plugins

                  git add .
                  git commit -m "feat: update plugins to release"
                  git push -f origin update-plugins

                  # Create a pull request using GitHub API
                  pr_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                    -d "{\"title\":\"chore: Update Gradle plugins\",\"body\":\"This PR updates the Gradle plugins.\",\"head\":\"update-plugins\",\"base\":\"main\"}" \
                    "https://api.github.com/repos/bitrise-io/bitrise-build-cache-cli/pulls")

                    pr_url=$(echo "$pr_response" | jq -r .html_url)
                    envman add --key PR_URL --value "$pr_url"

                    if [ "$pr_url" != "null" ]; then
                      echo "Pull request created successfully: $pr_url"
                    else
                      echo "Failed to create pull request. Response: $pr_response"
                      exit 1
                    fi
                else
                  echo "No changes detected, skipping commit."
                  exit 0
                fi
      - slack@4:
          inputs:
            - channel: "#team-advanced-ci-alerts-website"
            - text: |-
                Gradle plugin update PR is ready! :tada: :rocket: :gradle:

                Check PR here: $PR_URL
            - emoji: ":gradle:"
            - color: "#08a045"
            - webhook_url: "$SLACK_WEBHOOK_ALERTS"
          title: Send slack if PR opened
          run_if: '{{ getenv "PR_URL" | ne "" }}'
      - slack@4:
          inputs:
            - channel: "#team-advanced-ci-alerts-website"
            - text: |-
                CLI plugin update failed! :gradle: :gopher_lift: :rotating_light:

                Check build here: $BITRISE_BUILD_URL
            - emoji: ":rotating_light:"
            - color: "#ee003b"
            - webhook_url: "$SLACK_WEBHOOK_ALERTS"
          title: Send slack if failed
          run_if: ".IsBuildFailed"

  feature-e2e-gradle-duckduck:
    envs:
    - TEST_APP_URL: git@github.com:duckduckgo/Android.git
    - BRANCH: develop
    steps:
    - bundle::feature-e2e-setup: {}
    - apt-get-install:
        inputs:
          - packages: 'bc'
          - upgrade: "no"
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli activate gradle -d --cache
    - script:
        title: Print ~/.init.d/bitrise-build-cache.init.gradle.kts
        inputs:
          - content: |-
              cat ~/.gradle/init.d/bitrise-build-cache.init.gradle.kts
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --info --stacktrace 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              '\[Bitrise Build Cache\].*🤖 Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*🤖 Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'

            source ../_e2e/scripts/extract_invocation_id.sh

            invocation_id=$(extract_invocation_id_gradle "$BITRISE_DEPLOY_DIR/logs.txt")
            if [[ -z "$invocation_id" ]]; then
              fatal "Invocation ID not found in logs"
            fi

            echo "Found Invocation ID: $invocation_id"
            envman add --key INVOCATION_ID --value "$invocation_id"
    - script:
        title: Assert invocation from API
        inputs:
          - content: |-
              source ../_e2e/scripts/assert_invocations.sh

              assert_bitrise_invocation_in_list "$INVOCATION_ID" "gradle"
              assert_bitrise_invocation_detail "$INVOCATION_ID" "gradle"
              assert_invocation_tasks_gradle "$INVOCATION_ID"
              assert_build_performance "$INVOCATION_ID"
              assert_invocation_in_build_performance "$INVOCATION_ID" "gradle"
    - deploy-to-bitrise-io@2: {}

  feature-e2e-gradle-bitwarden:
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - apt-get-install:
        inputs:
          - packages: 'bc'
          - upgrade: "no"
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli activate gradle -d --cache
    - script:
        title: Print ~/.init.d/bitrise-build-cache.init.gradle.kts
        inputs:
          - content: |-
              cat ~/.gradle/init.d/bitrise-build-cache.init.gradle.kts
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run --info --stacktrace
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache" \
              --key "cli-bitwarden-test"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache \
              --key "cli-bitwarden-test"
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache --info --stacktrace 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*🤖 Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*🤖 Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'

            source ../_e2e/scripts/extract_invocation_id.sh

            invocation_id=$(extract_invocation_id_gradle "$BITRISE_DEPLOY_DIR/logs.txt")
            if [[ -z "$invocation_id" ]]; then
              fatal "Invocation ID not found in logs"
            fi

            echo "Found Invocation ID: $invocation_id"
            envman add --key INVOCATION_ID --value "$invocation_id"
    - script:
        title: Assert invocation from API
        inputs:
          - content: |-
              source ../_e2e/scripts/assert_invocations.sh

              assert_bitrise_invocation_in_list "$INVOCATION_ID" "gradle"
              assert_bitrise_invocation_detail "$INVOCATION_ID" "gradle"
              assert_invocation_tasks_gradle "$INVOCATION_ID"
              assert_build_performance "$INVOCATION_ID"
              assert_invocation_in_build_performance "$INVOCATION_ID" "gradle"
    - deploy-to-bitrise-io@2: {}
  feature-e2e-bazel-bitrisedc-no-rbe:
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: g2.linux.medium
    envs:
    - TEST_APP_URL: git@github.com:bitrise-io/bazel.git
    - BRANCH: master
    steps:
    - bundle::feature-e2e-setup: {}
    - apt-get-install:
        inputs:
          - packages: 'bc'
          - upgrade: "no"
    - script@1:
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail
            ../scripts/install_bazel.sh
        title: Install bazel
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli activate bazel -d --cache --cache-push --bes --timestamps
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (/usr/local/bin/bazel build //src:bazel-dev --announce_rc --copt='-w' 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            #!/bin/bash
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              '--remote_cache=grpcs:\/\/bitrise-accelerate\.services\.bitrise\.io' \
              'Invocation ID: ' \
              '--bes_header=x-os=Linux' \
              '--bes_header=x-cpu-cores=[0-9]+' \
              '--bes_header=x-mem-size=[0-9]+' \
              '--bes_header=x-ci-provider=bitrise' \
              "--bes_header=x-app-id=$BITRISE_APP_SLUG" \
              '--bes_header=x-locale=\w+' \
              '--bes_header=x-default-charset=\w+'

              source ../_e2e/scripts/extract_invocation_id.sh

              invocation_id=$(extract_invocation_id_bazel "$BITRISE_DEPLOY_DIR/logs.txt")
              if [[ -z "$invocation_id" ]]; then
                fatal "Invocation ID not found in logs"
              fi

              echo "Found Invocation ID: $invocation_id"
              envman add --key INVOCATION_ID --value "$invocation_id"
    - script:
        title: Assert invocation from API
        inputs:
          - content: |-
              source ../_e2e/scripts/assert_invocations.sh

              assert_bitrise_invocation_in_list "$INVOCATION_ID" "bazel"
              assert_bitrise_invocation_detail "$INVOCATION_ID" "bazel"
              assert_invocation_targets_bazel "$INVOCATION_ID"
              assert_build_performance "$INVOCATION_ID"
              assert_invocation_in_build_performance "$INVOCATION_ID" "bazel"
    - deploy-to-bitrise-io@2: {}

  feature-e2e-bazel-public-no-rbe:
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: g2.linux.medium
    envs:
      - TEST_APP_URL: git@github.com:bitrise-io/bazel.git
      - BRANCH: master
    steps:
      - bundle::feature-e2e-setup: { }
      - apt-get-install:
          inputs:
            - packages: 'bc dnsutils iputils-ping'
            - upgrade: "no"
      - script:
          title: Enable build cache
          inputs:
            - content: |-
                #!/bin/bash
                set -exo pipefail

                echo "Bitrise step ID: $BITRISE_STEP_EXECUTION_ID"
                ../bitrise-build-cache-cli activate bazel -d --cache --cache-push --bes --timestamps
      - script:
          title: Build and capture logs using Docker
          inputs:
            - content: |-
                #!/bin/bash
                set -exo pipefail

                mkdir -p ../_dockerroot
                cp -r $HOME/.bazelrc ../_dockerroot/.bazelrc

                echo ${DOCKER_SHARED_PASSWORD} | docker login --username bitrisedev --password-stdin

                sudo docker run --rm \
                  -w "/workspace" \
                  -e "BITRISE_APP_SLUG=$BITRISE_APP_SLUG" \
                  -e "BITRISE_BUILD_SLUG=$BITRISE_BUILD_SLUG" \
                  -e "BITRISE_STEP_EXECUTION_ID=$BITRISE_STEP_EXECUTION_ID" \
                  -e "BITRISE_TRIGGERED_WORKFLOW_TITLE=$BITRISE_TRIGGERED_WORKFLOW_TITLE" \
                  -e "GIT_REPOSITORY_UR=$GIT_REPOSITORY_URL" \
                  -e "BITRISE_GIT_COMMIT=$BITRISE_GIT_COMMIT" \
                  --mount "type=bind,source=$PWD,target=/workspace" \
                  --mount "type=bind,source=$(readlink -f ../_dockerroot)/.bazelrc,target=/root/.bazelrc,ro" \
                  --mount "type=bind,source=$BITRISE_DEPLOY_DIR,target=/bitrise-deploy" \
                  ubuntu:22.04 \
                  bash -c "set -o pipefail; apt-get update && apt-get install -y curl build-essential xz-utils zip unzip python3 && \
                    curl -Lo bazelisk https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 && \
                    chmod +x bazelisk && \
                    ./bazelisk build //src:bazel-dev --announce_rc --copt='-w' 2>&1 | tee /bitrise-deploy/logs.txt"

      - script:
          title: Check for cache invocations
          inputs:
            - content: |-
                #!/bin/bash
                set -exo pipefail

                ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
                  '--remote_cache=grpcs:\/\/bitrise-accelerate\.services\.bitrise\.io' \
                  'Invocation ID: ' \
                  '--bes_header=x-os=Linux' \
                  '--bes_header=x-cpu-cores=[0-9]+' \
                  '--bes_header=x-mem-size=[0-9]+' \
                  '--bes_header=x-ci-provider=bitrise' \
                  "--bes_header=x-app-id=$BITRISE_APP_SLUG" \
                  '--bes_header=x-locale=\w+' \
                  '--bes_header=x-default-charset=\w+'

                  source ../_e2e/scripts/extract_invocation_id.sh

                  invocation_id=$(extract_invocation_id_bazel "$BITRISE_DEPLOY_DIR/logs.txt")
                  if [[ -z "$invocation_id" ]]; then
                    fatal "Invocation ID not found in logs"
                  fi

                  echo "Found Invocation ID: $invocation_id"
                  envman add --key INVOCATION_ID --value "$invocation_id"
      - script:
          title: Assert invocation from API
          inputs:
            - content: |-
                source ../_e2e/scripts/assert_invocations.sh

                assert_bitrise_invocation_in_list "$INVOCATION_ID" "bazel"
                assert_bitrise_invocation_detail "$INVOCATION_ID" "bazel"
                assert_invocation_targets_bazel "$INVOCATION_ID"
                assert_build_performance "$INVOCATION_ID"
                assert_invocation_in_build_performance "$INVOCATION_ID" "bazel"
      - deploy-to-bitrise-io@2: { }

  gradle-configuration-e2e-osx:
    meta:
      bitrise.io:
        machine_type_id: g2.mac.medium
        stack: osx-xcode-edge
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli activate gradle -d --cache
    - script:
        title: Print ~/.init.d/bitrise-build-cache.init.gradle.kts
        inputs:
        - content: |-
            cat ~/.gradle/init.d/bitrise-build-cache.init.gradle.kts
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run --info --stacktrace
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache --info --stacktrace 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*🤖 Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*🤖 Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}

  gradle-configuration-e2e-linux:
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli activate gradle -d --cache
    - script:
        title: Print ~/.init.d/bitrise-build-cache.init.gradle.kts
        inputs:
          - content: |-
              cat ~/.gradle/init.d/bitrise-build-cache.init.gradle.kts
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run --info --stacktrace
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache --info --stacktrace 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*🤖 Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*🤖 Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}

  ai_pr_summary:
    triggers:
      # run for pull requests; changed_files filter exposes the list of changed files
      pull_request:
        - target_branch: '*'
          source_branch: '*'
          changed_files: '*'
    # Set status_report_name to report the status of this workflow separately.
    status_report_name: 'AI Review'
    # Simple Medium Linux machine is enough
    meta:
      bitrise.io:
        machine_type_id: g2.linux.medium
        stack: linux-docker-android-22.04
    envs:
      - GITHUB_TOKEN: $AI_GITHUB_TOKEN
      - LITELLM_API_KEY: $LITELLM_API_KEY
      - PUBSUB_TOPIC_ID: bitcode-analytics
      - PUBSUB_PROJECT_ID: ip-ai-dev
      - PUBSUB_CREDENTIALS_JSON_B64: $AI_PUBSUB_CREDENTIALS_JSON_B64
    steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8.4.0: { }
      - script@1.2.1:
          title: Generate AI Review for PR
          inputs:
            - content: |-
                #!/bin/bash
                set -e

                sudo apt update
                sudo apt install ripgrep -y

                # Parse repository name from repo URL (works for SSH & HTTPS)
                REPO_URL="${GIT_REPOSITORY_URL}"
                REPO=$(echo "$REPO_URL" | sed -E 's#(git@|https://)([^/:]+)[/:]([^/]+)/([^.]+)(\.git)?#\3/\4#')

                # 1. Unshallow the repo if it's a shallow clone (safe to run even if already full)
                git fetch --unshallow || true

                # 2. Fetch all branch refs (this ensures both the PR and the target/destination branch are present)
                git fetch origin

                # 3. Fetch both relevant branches explicitly for safety (redundant but safe)
                git fetch origin "$BITRISEIO_GIT_BRANCH_DEST"
                git fetch origin "$BITRISE_GIT_BRANCH"

                # 4. Create/reset local branches to match the remote
                git checkout -B "$BITRISEIO_GIT_BRANCH_DEST" "origin/$BITRISEIO_GIT_BRANCH_DEST"
                git checkout -B "$BITRISE_GIT_BRANCH" "origin/$BITRISE_GIT_BRANCH"

                # (Optionally: check out the PR branch if that is the branch you want to analyze)
                git checkout "$BITRISE_GIT_BRANCH"

                # Download and install bitcode
                curl -L https://storage.googleapis.com/bitrise-bitcode/bitcode-linux-amd64.tar.gz -o /tmp/bitcode-linux-amd64.tar.gz
                sudo tar -xzf /tmp/bitcode-linux-amd64.tar.gz -C /usr/local/bin/
                sudo chmod +x /usr/local/bin/bitcode

                # 6. Run your AI reviewer (customize flags as needed)
                bitcode review  \
                  --git-provider github \
                  --pr-id="${BITRISE_PULL_REQUEST}" \
                  --repo="${REPO}" \
                  --max-token-usage 5000000 \
                  --session-id "${BITRISE_BUILD_SLUG}" \
                  --log-level info

                echo "Done! PR reviewed."

  e2e-xcode-comp-cache:
    meta:
      bitrise.io:
        stack: osx-xcode-26.0.x-edge-iad
        machine_type_id: g2.mac.large
        stack_rollback_version: 2-109-0
    envs:
    - TEST_APP_URL: git@github.com:bitrise-io/swift-composable-architecture.git
    - COMMIT: 27db3dfc9f55c206e09ca2a51b93bd600a56429e
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - script:
        title: Delete _tmp dirs
        inputs:
          - content: rm -rf _tmp
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
          - repository_url: "$TEST_APP_URL"
          - clone_into_dir: "./_tmp"
          - branch: "$BRANCH"
          - commit: "$COMMIT"
    - git-clone: {}
    - script:
        title: build CLI
        inputs:
          - content: |-
              set -exo pipefail
              go build -o bin/bitrise-build-cache-cli
    - change-workdir:
        title: Switch working dir to _tmp
        inputs:
          - path: "./_tmp"
    - script:
        title: build app
        inputs:
          - content: |-
              #!/usr/bin/env bash
              set -eo pipefail
              shopt -s expand_aliases

              echo "Original Xcodebuild command location:"
              type xcodebuild || true

              # Add --xcode-path /usr/bin/xcodebuild to test xcode path override (for local)
              ../bin/bitrise-build-cache-cli -d activate xcode \
                --cache \
                --proxy-socket-path "${TMPDIR}xcelerate-proxy.sock"

              source ~/.bashrc

              echo "Xcodebuild command location after activation:"
              type xcodebuild || true

              xcodebuild build \
                -workspace ComposableArchitecture.xcworkspace \
                -scheme ComposableArchitecture \
                -destination "generic/platform=iOS" \
                -skipMacroValidation | tee xcodebuild.log | xcpretty
              
              ../bin/bitrise-build-cache-cli -d xcelerate stop-proxy
    - script:
        title: gather info
        inputs:
          - content: |-
              set -exo pipefail

              cp ~/.bitrise-xcelerate/config.json $BITRISE_DEPLOY_DIR
              cp ~/.bitrise-xcelerate/proxy.err.log $BITRISE_DEPLOY_DIR
              cp ~/.bitrise-xcelerate/proxy.out.log $BITRISE_DEPLOY_DIR
              cp xcodebuild.log $BITRISE_DEPLOY_DIR
              
              head -n 20 $BITRISE_DEPLOY_DIR/xcodebuild.log
              tail -n 20 $BITRISE_DEPLOY_DIR/xcodebuild.log
    - deploy-to-bitrise-io: {}
    - script:
        title: Check for cache usage
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/xcodebuild.log" 'CompilationCacheMetrics'
  e2e-xcode-comp-cache-with-disabled-cache:
    meta:
      bitrise.io:
        stack: osx-xcode-26.0.x-edge-iad
        machine_type_id: g2.mac.large
        stack_rollback_version: 2-109-0
    envs:
    - TEST_APP_URL: git@github.com:bitrise-io/swift-composable-architecture.git
    - COMMIT: 27db3dfc9f55c206e09ca2a51b93bd600a56429e
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - script:
        title: Delete _tmp dirs
        inputs:
          - content: rm -rf _tmp
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
          - repository_url: "$TEST_APP_URL"
          - clone_into_dir: "./_tmp"
          - branch: "$BRANCH"
          - commit: "$COMMIT"
    - git-clone: {}
    - script:
        title: build CLI
        inputs:
          - content: |-
              set -exo pipefail
              go build -o bin/bitrise-build-cache-cli
    - change-workdir:
        title: Switch working dir to _tmp
        inputs:
          - path: "./_tmp"
    - script:
        title: build app
        inputs:
          - content: |-
              #!/usr/bin/env bash
              set -eo pipefail
              shopt -s expand_aliases

              echo "Original Xcodebuild command location:"
              type xcodebuild || true

              # Add --xcode-path /usr/bin/xcodebuild to test xcode path override (for local)
              ../bin/bitrise-build-cache-cli -d activate xcode \
                --cache=false

              source ~/.bashrc

              echo "Xcodebuild command location after activation:"
              type xcodebuild || true

              xcodebuild build \
                -workspace ComposableArchitecture.xcworkspace \
                -scheme ComposableArchitecture \
                -destination "generic/platform=iOS" \
                -skipMacroValidation | tee xcodebuild.log | xcpretty
    - script:
        title: gather info
        inputs:
          - content: |-
              set -exo pipefail

              cp ~/.bitrise-xcelerate/config.json $BITRISE_DEPLOY_DIR
              cp ~/.bitrise-xcelerate/proxy.err.log $BITRISE_DEPLOY_DIR
              cp ~/.bitrise-xcelerate/proxy.out.log $BITRISE_DEPLOY_DIR
              cp xcodebuild.log $BITRISE_DEPLOY_DIR
              
              head -n 20 $BITRISE_DEPLOY_DIR/xcodebuild.log
              tail -n 20 $BITRISE_DEPLOY_DIR/xcodebuild.log
    - deploy-to-bitrise-io: {}
    - script:
        title: Check that cache usage is not present
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern_not_found.sh "$BITRISE_DEPLOY_DIR/xcodebuild.log" 'CompilationCacheMetrics'

step_bundles:
  generate_gradle_verification_reference:
    steps:
    - script:
        title: Generate Gradle verification reference
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            # Backup $HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            GRADLE_INIT_PATH=$HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            if [[ -f "$GRADLE_INIT_PATH" ]]; then
              mv $GRADLE_INIT_PATH $GRADLE_INIT_PATH.backup
            fi

            go build -o /tmp/bin/bitrise-build-cache-cli

            SAMPLE_PATH=$(realpath ./gradle_verification_sample)
            GRADLE_VERIFICATION_REF_PATH=$SAMPLE_PATH/gradle/verification-metadata.xml
            GRADLE_VERIFICATION_REF_TARGET_PATH=$(realpath ./cmd/asset/verification-metadata.xml)

            # add plugin with CLI
            cd "$SAMPLE_PATH"
            /tmp/bin/bitrise-build-cache-cli gradle-verification add-reference-deps

            # generate xml
            rm -f "$SAMPLE_PATH/gradle/verification-metadata.xml"
            ./gradlew --write-verification-metadata sha256 help

            cat $GRADLE_VERIFICATION_REF_PATH
            echo "Generated verification xml: $GRADLE_VERIFICATION_REF_PATH"

            # Copy metadata to be included in the CLI binary
            mv -f "$GRADLE_VERIFICATION_REF_PATH" "$GRADLE_VERIFICATION_REF_TARGET_PATH"
            envman add --key GRADLE_VERIFICATION_REF_TARGET_PATH --value "$GRADLE_VERIFICATION_REF_TARGET_PATH"

  check_gradle_verification_reference:
    steps:
    - script@1:
        title: Check if local updates to verification-metadata.xml are not commited
        inputs:
          - content: |-
              set -x

              git update-index --refresh | grep "cmd/asset/verification-metadata.xml"
              if [[ $? == 0 ]]; then
                echo "Please manually commit the changes to the repo:"
                echo "$GRADLE_VERIFICATION_REF_TARGET_PATH"
                exit 1
              else
                echo "The files have no unstaged changes: $GRADLE_VERIFICATION_REF_TARGET_PATH"
                exit 0
              fi
  generate_and_commit_dependency_matrix:
    steps:
      - script:
          run_if: ".IsCI"
          title: Install pandoc
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                wget https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                tar xvzf pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                sudo mv pandoc-$PANDOC_VERSION/bin/pandoc /usr/local/bin/

                rm -rf pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                rm -rf pandoc-$PANDOC_VERSION

                pandoc --version
      - script:
          title: Install go versions
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                asdf install golang 1.23.8
                asdf install golang 1.21.5
      - script:
          title: Generate dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                bash ./scripts/generate-dependency-matrix.sh
      - script:
          title: Reformat dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                pandoc --from=markdown --to=gfm --wrap=auto --output cleaned.md docs/dependency-matrix.md
                mv cleaned.md docs/dependency-matrix.md
      - script:
          title: Commit dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                git status
                ls -l docs/dependency-matrix.md
                git stash push -u -m "stash before switching to gh-pages"

                git fetch --all
                git checkout gh-pages

                rm -f docs/dependency-matrix.md
                git stash apply

                if [ ! -f docs/dependency-matrix.md ]; then
                  echo "No dependency matrix found, skipping commit."
                  exit -1
                fi

                if [ -n "$(git status --porcelain)" ]; then
                  echo "Changes detected, committing and pushing to gh-pages branch."

                  git add docs/dependency-matrix.md
                  git diff --cached docs/dependency-matrix.md

                  git commit -m "chore: update dependency matrix"
                  git push origin gh-pages
                else
                  echo "No changes detected, skipping commit."
                  exit 0
                fi

  feature-e2e-setup:
    steps:
      - activate-ssh-key:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - script:
          title: Clone e2e testing repo with deploy key
          inputs:
            - content: |-
                #!/bin/bash
                set -ex

                mkdir -p ~/.ssh
                echo "$SSH_DEPLOY_KEY_E2E_TESTING" > ~/.ssh/github_deploy_build_cache_e2e_testing
                chmod 600 ~/.ssh/github_deploy_build_cache_e2e_testing

                ssh-add ~/.ssh/github_deploy_build_cache_e2e_testing

                mkdir -p ./_e2e
                GIT_SSH_COMMAND='ssh -i ~/.ssh/github_deploy_build_cache_e2e_testing -o IdentitiesOnly=yes' git clone git@github.com:bitrise-io/build-cache-e2e-testing.git ./_e2e

                ls -la ./_e2e
      - script:
          title: Delete _tmp dirs
          inputs:
            - content: rm -rf _tmp
      - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
          inputs:
            - repository_url: "$TEST_APP_URL"
            - clone_into_dir: "./_tmp"
            - branch: "$BRANCH"
            - commit: "$COMMIT"
      - git-clone: {}
      - script:
          title: build CLI
          inputs:
            - content: |-
                set -exo pipefail
                go build -o bitrise-build-cache-cli
      - change-workdir:
          title: Switch working dir to _tmp
          inputs:
            - path: "./_tmp"

pipelines:
  features-e2e:
    workflows:
      test: {}
      feature-e2e-bazel-bitrisedc-no-rbe: {}
      feature-e2e-bazel-public-no-rbe: {}
      feature-e2e-gradle-duckduck: {}
      feature-e2e-gradle-bitwarden: {}
      gradle-configuration-e2e-osx: {}
      gradle-configuration-e2e-linux: {}
      e2e-xcode-comp-cache: {}
      e2e-xcode-comp-cache-with-disabled-cache: {}
    triggers:
      pull_request:
        - source_branch: "*"
      push:
        - branch: main
