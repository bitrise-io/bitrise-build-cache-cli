format_version: "13"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other
meta:
  bitrise.io:
    stack: linux-docker-android-22.04

app:
  envs:
  - PANDOC_VERSION: "3.6.2"
  - MAVEN_VERSION: "3.9.9"

workflows:
  release:
    description: Creates Linux and Darwin binaries, then publishes a GitHub release
    triggers:
      tag:
      - name:
          regex: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
    envs:
    - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        title: asdf use latest go
        inputs:
        - content: |-
            #!/usr/bin/env bash

            asdf install golang 1.23.8
            asdf global golang 1.23.8
    - script:
        title: Install Goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            GOBIN=/usr/local/bin/ go install github.com/goreleaser/goreleaser/v2@latest
    - bundle::generate_gradle_verification_reference: { }
    - bundle::check_gradle_verification_reference: { }
    - script:
        title: Goreleaser (create binaries + publish to GH)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release
    - deploy-to-bitrise-io@2: {}
    - script:
        title: Update step
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            ./scripts/update_step.sh
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              Build Cache for Gradle step update PR is ready! :tada: :rocket: :bitrise:

              Check PR here: $PR_URL
          - emoji: ":gradle:"
          - color: "#08a045"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if PR opened
        run_if: '{{ getenv "PR_URL" | ne "" }}'
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              CLI release failed! :gopher_lift: :rotating_light:

              Check build here: $BITRISE_BUILD_URL
          - emoji: ":rotating_light:"
          - color: "#ee003b"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if failed
        run_if: ".IsBuildFailed"
    meta:
      bitrise.io:
        machine_type_id: g2-m1.8core
        stack: osx-xcode-edge
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - go-list@1: {}
    - script@1:
        title: golangci-lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            make lint
    - go-test@1: {}
    - bundle::generate_gradle_verification_reference: { }
    - bundle::check_gradle_verification_reference: { }
    - deploy-to-bitrise-io@2:
        inputs:
          - deploy_path: "$GRADLE_VERIFICATION_REF_TARGET_PATH"
    meta:
      bitrise.io:
        machine_type_id: g2-m1.8core
        stack: osx-xcode-edge

  e2e:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - script@1:
        title: build CLI
        inputs:
        - content: |-
            set -ex
            go build -o bitrise-build-cache-cli
    - script@1:
        title: Run test
        inputs:
        - content: |-
            set -ex
            bitrise run --config e2e/bitrise.yml test_gradle_output_diagnostics

  generate_gradle_verification:
    steps:
    - bundle::generate_gradle_verification_reference: { }

  generate_and_commit_dependency_matrix:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8:
        inputs:
          - fetch_tags: "yes"
          - shallow_clone: "false"
          - clone_depth: "-1"
    - bundle::generate_and_commit_dependency_matrix: {}
    - slack@4:
        inputs:
          - channel: "#team-advanced-ci-alerts-website"
          - text: |-
              Dependency matrix generation failed! :matrix-code: :rotating_light:

              Check build here: $BITRISE_BUILD_URL
          - emoji: ":rotating_light:"
          - color: "#ee003b"
          - webhook_url: "$SLACK_WEBHOOK_ALERTS"
        title: Send slack if failed
        run_if: ".IsBuildFailed"

  update_plugins:
    envs:
      - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN
    steps:
      - activate-ssh-key@4:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8:
          inputs:
          - fetch_tags: "yes"
          - shallow_clone: "false"
          - clone_depth: "-1"
      - apt-get-install:
          inputs:
            - packages: libxml2-utils
      - script:
          title: Ensure we're on main
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                
                git fetch origin
                if [[ "$BITRISE_GIT_BRANCH" != "main" ]]; then
                  git checkout main
                  git pull origin main
                fi
      - script:
          title: Update plugins with latest version
          inputs:
            - content: |                
                bash ./scripts/update_plugins.sh
      - bundle::generate_gradle_verification_reference: {}
      - script:
          title: Commit updated plugins and open PR
          inputs:
            - content: |
                set -ex
                
                # Check for existing PR with the same title
                existing_pr=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/bitrise-io/bitrise-build-cache-cli/pulls?state=open" | jq -r ".[] | select(.title == \"chore: Update Gradle plugins\") | .html_url")
                  
                if [ -n "$existing_pr" ]; then
                  echo "A pull request with this title already exists: $existing_pr"
                  exit 0
                fi
                
                if [ -n "$(git status --porcelain)" ]; then
                  git branch -D update-plugins || true
                  git checkout -b update-plugins
                
                  git add .
                  git commit -m "feat: update plugins to release"
                  git push -f origin update-plugins
                  
                  # Create a pull request using GitHub API
                  pr_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                    -d "{\"title\":\"chore: Update Gradle plugins\",\"body\":\"This PR updates the Gradle plugins.\",\"head\":\"update-plugins\",\"base\":\"main\"}" \
                    "https://api.github.com/repos/bitrise-io/bitrise-build-cache-cli/pulls")
                    
                    pr_url=$(echo "$pr_response" | jq -r .html_url)
                    envman add --key PR_URL --value "$pr_url" 
                    
                    if [ "$pr_url" != "null" ]; then
                      echo "Pull request created successfully: $pr_url"
                    else
                      echo "Failed to create pull request. Response: $pr_response"
                      exit 1
                    fi
                else
                  echo "No changes detected, skipping commit."
                  exit 0
                fi
      - slack@4:
          inputs:
            - channel: "#team-advanced-ci-alerts-website"
            - text: |-
                Gradle plugin update PR is ready! :tada: :rocket: :gradle:

                Check PR here: $PR_URL
            - emoji: ":gradle:"
            - color: "#08a045"
            - webhook_url: "$SLACK_WEBHOOK_ALERTS"
          title: Send slack if PR opened
          run_if: '{{ getenv "PR_URL" | ne "" }}'
      - slack@4:
          inputs:
            - channel: "#team-advanced-ci-alerts-website"
            - text: |-
                CLI plugin update failed! :gradle: :gopher_lift: :rotating_light:

                Check build here: $BITRISE_BUILD_URL
            - emoji: ":rotating_light:"
            - color: "#ee003b"
            - webhook_url: "$SLACK_WEBHOOK_ALERTS"
          title: Send slack if failed
          run_if: ".IsBuildFailed"

  feature-e2e-gradle-duckduck:
    envs:
    - TEST_APP_URL: git@github.com:duckduckgo/Android.git
    - BRANCH: develop
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli enable-for gradle --metrics -d
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail
            
            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              '\[Bitrise Build Cache\].*ðŸ¤– Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*ðŸ¤– Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}

  feature-e2e-gradle-bitwarden:
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli enable-for gradle --metrics -d
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache" \
              --key "cli-bitwarden-test"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache \
              --key "cli-bitwarden-test"
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*ðŸ¤– Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*ðŸ¤– Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}

  feature-e2e-bazel:
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
    envs:
    - TEST_APP_URL: git@github.com:bitrise-io/bazel.git
    - BRANCH: master
    steps:
    - bundle::feature-e2e-setup: {}
    - script@1:
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail
            ../scripts/install_bazel.sh
        title: Install bazel
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli enable-for bazel -d
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (/usr/local/bin/bazel build //src:bazel-dev --announce_rc --copt='-w' 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            #!/bin/bash
            set -exo pipefail
            
            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              '--remote_cache=grpcs:\/\/bitrise-accelerate\.services\.bitrise\.io' \
              'Invocation ID: ' \
              '--bes_header=x-os=Linux' \
              '--bes_header=x-cpu-cores=[0-9]+' \
              '--bes_header=x-mem-size=[0-9]+' \
              '--bes_header=x-locale=\w+' \
              '--bes_header=x-default-charset=\w+' \
    - deploy-to-bitrise-io@2: {}

  gradle-configuration-e2e-osx:
    meta:
      bitrise.io:
        machine_type_id: g2-m1.8core
        stack: osx-xcode-edge
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli enable-for gradle --metrics -d
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*ðŸ¤– Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*ðŸ¤– Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}
    
  gradle-configuration-e2e-linux:
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
    envs:
    - TEST_APP_URL: git@github.com:bitwarden/android.git
    - COMMIT: 2c71ab7d27d7f976766adee7bfd1828d5eda0850
    steps:
    - bundle::feature-e2e-setup: {}
    - script:
        title: Enable build cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli enable-for gradle --metrics -d
    - script:
        title: Create local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ./gradlew debug --configuration-cache --dry-run
    - script:
        title: Save configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli save-gradle-configuration-cache \
              --config-cache-dir "$PWD/.gradle/configuration-cache"
    - script:
        title: Delete local configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            rm -rf .gradle/configuration-cache
    - script:
        title: Restore configuration cache
        inputs:
        - content: |-
            set -exo pipefail
            ../bitrise-build-cache-cli restore-gradle-configuration-cache
    - script:
        title: Build and capture logs
        inputs:
        - content: |-
            set -exo pipefail
            (./gradlew debug --configuration-cache 2>&1) | tee "$BITRISE_DEPLOY_DIR/logs.txt"
    - script:
        title: Check for cache invocations
        inputs:
        - content: |-
            set -exo pipefail

            ../scripts/check_pattern.sh "$BITRISE_DEPLOY_DIR/logs.txt" \
              'Reusing configuration cache.' \
              '\[Bitrise Build Cache\].*ðŸ¤– Bitrise remote cache enabled' \
              '\[Bitrise Build Cache\].*Request metadata invocationId' \
              '\[Bitrise Analytics\].*ðŸ¤– Bitrise analytics enabled for tasks.*Invocation ID: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    - deploy-to-bitrise-io@2: {}

step_bundles:
  generate_gradle_verification_reference:
    steps:
    - script:
        title: Generate Gradle verification reference
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            # Backup $HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            GRADLE_INIT_PATH=$HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            if [[ -f "$GRADLE_INIT_PATH" ]]; then
              mv $GRADLE_INIT_PATH $GRADLE_INIT_PATH.backup
            fi

            go build -o /tmp/bin/bitrise-build-cache-cli

            SAMPLE_PATH=$(realpath ./gradle_verification_sample)
            GRADLE_VERIFICATION_REF_PATH=$SAMPLE_PATH/gradle/verification-metadata.xml
            GRADLE_VERIFICATION_REF_TARGET_PATH=$(realpath ./cmd/asset/verification-metadata.xml)
            
            # add plugin with CLI
            cd "$SAMPLE_PATH"
            /tmp/bin/bitrise-build-cache-cli gradle-verification add-reference-deps

            # generate xml
            rm -f "$SAMPLE_PATH/gradle/verification-metadata.xml"
            ./gradlew --write-verification-metadata sha256 help

            cat $GRADLE_VERIFICATION_REF_PATH
            echo "Generated verification xml: $GRADLE_VERIFICATION_REF_PATH"
            
            # Copy metadata to be included in the CLI binary
            mv -f "$GRADLE_VERIFICATION_REF_PATH" "$GRADLE_VERIFICATION_REF_TARGET_PATH"
            envman add --key GRADLE_VERIFICATION_REF_TARGET_PATH --value "$GRADLE_VERIFICATION_REF_TARGET_PATH"
    
  check_gradle_verification_reference:
    steps:
    - script@1:
        title: Check if local updates to verification-metadata.xml are not commited
        inputs:
          - content: |-
              set -x

              git update-index --refresh | grep "cmd/asset/verification-metadata.xml"
              if [[ $? == 0 ]]; then
                echo "Please manually commit the changes to the repo:"
                echo "$GRADLE_VERIFICATION_REF_TARGET_PATH"
                exit 1
              else
                echo "The files have no unstaged changes: $GRADLE_VERIFICATION_REF_TARGET_PATH"
                exit 0
              fi
  generate_and_commit_dependency_matrix:
    steps:
      - script:
          run_if: ".IsCI"
          title: Install pandoc
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                wget https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                tar xvzf pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                sudo mv pandoc-$PANDOC_VERSION/bin/pandoc /usr/local/bin/
                
                rm -rf pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                rm -rf pandoc-$PANDOC_VERSION
                
                pandoc --version
      - script:
          title: Install go versions
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                
                asdf install golang 1.23.8
                asdf install golang 1.21.5
      - script:
          title: Generate dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                bash ./scripts/generate-dependency-matrix.sh
      - script:
          title: Reformat dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                
                pandoc --from=markdown --to=gfm --wrap=auto --output cleaned.md docs/dependency-matrix.md
                mv cleaned.md docs/dependency-matrix.md
      - script:
          title: Commit dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                          
                git status  
                ls -l docs/dependency-matrix.md
                git stash push -u -m "stash before switching to gh-pages"
              
                git fetch --all
                git checkout gh-pages
              
                rm -f docs/dependency-matrix.md
                git stash apply
                
                if [ ! -f docs/dependency-matrix.md ]; then
                  echo "No dependency matrix found, skipping commit."
                  exit -1
                fi
                
                if [ -n "$(git status --porcelain)" ]; then
                  echo "Changes detected, committing and pushing to gh-pages branch."
                                    
                  git add docs/dependency-matrix.md
                  git diff --cached docs/dependency-matrix.md

                  git commit -m "chore: update dependency matrix"
                  git push origin gh-pages
                else 
                  echo "No changes detected, skipping commit."
                  exit 0
                fi

  feature-e2e-setup:
    steps:
      - activate-ssh-key:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - script:
          title: Delete _tmp dir
          inputs:
            - content: rm -rf _tmp
      - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
          inputs:
            - repository_url: "$TEST_APP_URL"
            - clone_into_dir: "./_tmp"
            - branch: "$BRANCH"
            - commit: "$COMMIT"
      - git-clone: {}
      - script:
          title: build CLI
          inputs:
            - content: |-
                set -exo pipefail
                go build -o bitrise-build-cache-cli
      - change-workdir:
          title: Switch working dir to _tmp
          inputs:
            - path: "./_tmp"

pipelines:
  features-e2e:
    workflows:
      test: {}
      feature-e2e-bazel: {}
      feature-e2e-gradle-duckduck: {}
      feature-e2e-gradle-bitwarden: {}
      gradle-configuration-e2e-osx: {}
      gradle-configuration-e2e-linux: {}
    triggers:
      pull_request:
        - source_branch: "*"
      push:
        - branch: main
