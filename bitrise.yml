format_version: "13"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other
meta:
  bitrise.io:
    machine_type_id: g2.linux.medium
    stack: linux-docker-android-22.04
trigger_map:
- push_branch: main
  workflow: test
- pull_request_source_branch: '*'
  workflow: test
- tag: '*.*.*'
  workflow: release

app:
  envs:
  - PANDOC_VERSION: "3.6.2"

workflows:
  release:
    description: Creates Linux and Darwin binaries, then publishes a GitHub release
    envs:
    - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        title: asdf use latest go
        inputs:
        - content: |-
            #!/usr/bin/env bash

            asdf global golang 1.22
    - script:
        title: Install Goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            GOBIN=/usr/local/bin/ go install github.com/goreleaser/goreleaser/v2@latest
    - bundle::check_gradle_verification_reference: { }
    - script:
        title: Goreleaser (create binaries + publish to GH)
        deps:          
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release
    - deploy-to-bitrise-io@2: {}
    meta:
      bitrise.io:
        machine_type_id: g2-m1.8core
        stack: osx-xcode-edge
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - go-list@1: {}
    - script@1:
        title: golangci-lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            make lint
    - go-test@1: {}
    - bundle::check_gradle_verification_reference: { }
    - deploy-to-bitrise-io@2:
        inputs:
          - deploy_path: "$GRADLE_VERIFICATION_REF_TARGET_PATH"
    meta:
      bitrise.io:
        machine_type_id: g2-m1.8core
        stack: osx-xcode-edge
  
  e2e:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - script@1:
        title: build CLI
        inputs:
        - content: |-
            set -ex
            go build -o bitrise-build-cache-cli
    - script@1:
        title: Run test
        inputs:
        - content: |-
            set -ex
            bitrise run --config e2e/bitrise.yml test_gradle_output_diagnostics

  check_gradle_verification:
    steps:
    - bundle::check_gradle_verification_reference: { }

  generate_and_commit_dependency_matrix:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: { }
    - bundle::generate_and_commit_dependency_matrix: {}

step_bundles:
  check_gradle_verification_reference:
    steps:
    - script:
        title: Generate Gradle verification reference
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            # Backup $HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            GRADLE_INIT_PATH=$HOME/.gradle/init.d/bitrise-build-cache.init.gradle.kts
            if [[ -f "$GRADLE_INIT_PATH" ]]; then
              mv $GRADLE_INIT_PATH $GRADLE_INIT_PATH.backup
            fi

            go build -o /tmp/bin/bitrise-build-cache-cli

            SAMPLE_PATH=$(realpath ./gradle_verification_sample)
            GRADLE_VERIFICATION_REF_PATH=$SAMPLE_PATH/gradle/verification-metadata.xml
            GRADLE_VERIFICATION_REF_TARGET_PATH=$(realpath ./cmd/asset/verification-metadata.xml)
            
            # add plugin with CLI
            cd "$SAMPLE_PATH"
            /tmp/bin/bitrise-build-cache-cli gradle-verification add-reference-deps

            # generate xml
            rm -f "$SAMPLE_PATH/gradle/verification-metadata.xml"
            ./gradlew --write-verification-metadata sha256 help

            cat $GRADLE_VERIFICATION_REF_PATH
            echo "Generated verification xml: $GRADLE_VERIFICATION_REF_PATH"
            
            # Copy metadata to be included in the CLI binary
            mv -f "$GRADLE_VERIFICATION_REF_PATH" "$GRADLE_VERIFICATION_REF_TARGET_PATH"
            envman add --key GRADLE_VERIFICATION_REF_TARGET_PATH --value "$GRADLE_VERIFICATION_REF_TARGET_PATH"
    - script@1:
        title: Check if local updates to verification-metadata.xml are not commited
        inputs:
        - content: |-
            set -x
            
            git update-index --refresh | grep "cmd/asset/verification-metadata.xml"
            if [[ $? == 0 ]]; then
              echo "Please manually commit the changes to the repo:"
              echo "$GRADLE_VERIFICATION_REF_TARGET_PATH"
              exit 1
            else
              echo "The files have no unstaged changes: $GRADLE_VERIFICATION_REF_TARGET_PATH"
              exit 0
            fi

  generate_and_commit_dependency_matrix:
    steps:
      - script:
          run_if: ".IsCI"
          title: Install pandoc
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                wget https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                tar xvzf pandoc-$PANDOC_VERSION-linux-amd64.tar.gz
                sudo mv pandoc-$PANDOC_VERSION/bin/pandoc /usr/local/bin/
                
                pandoc --version
      - script:
          title: Check out gh-pages branch
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                git checkout gh-pages
      - script:
          title: Generate dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                                
                bash ./scripts/generate_dependency_matrix.sh
      - script:
          title: Reformat dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                
                pandoc --from=markdown --to=gfm --wrap=auto --output cleaned.md docs/dependency-matrix.md
                mv cleaned.md docs/dependency-matrix.md
      - script:
          title: Commit dependency matrix
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                
                if [ -n "$(git status --porcelain)" ]; then
                  echo "Changes detected, committing and pushing to gh-pages branch."
                  
                  git add docs/dependency_matrix.md
                  git commit -m "chore: update dependency matrix"
                  git push origin gh-pages
                else 
                  echo "No changes detected, skipping commit."
                fi
