// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/bitrise-io/xcelerate/xcodeargs"
)

// Ensure, that RunnerMock does implement xcodeargs.Runner.
// If this is not the case, regenerate this file with moq.
var _ xcodeargs.Runner = &RunnerMock{}

// RunnerMock is a mock implementation of xcodeargs.Runner.
//
//	func TestSomethingThatUsesRunner(t *testing.T) {
//
//		// make and configure a mocked xcodeargs.Runner
//		mockedRunner := &RunnerMock{
//			RunFunc: func(args []string) error {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedRunner in code that requires xcodeargs.Runner
//		// and then make assertions.
//
//	}
type RunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(args []string) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Args is the args argument value.
			Args []string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *RunnerMock) Run(args []string) error {
	if mock.RunFunc == nil {
		panic("RunnerMock.RunFunc: method is nil but Runner.Run was just called")
	}
	callInfo := struct {
		Args []string
	}{
		Args: args,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(args)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedRunner.RunCalls())
func (mock *RunnerMock) RunCalls() []struct {
	Args []string
} {
	var calls []struct {
		Args []string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
