// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/bitrise-io/xcelerate/internal"
)

// Ensure, that XcodeRunnerMock does implement internal.XcodeRunner.
// If this is not the case, regenerate this file with moq.
var _ internal.XcodeRunner = &XcodeRunnerMock{}

// XcodeRunnerMock is a mock implementation of internal.XcodeRunner.
//
//	func TestSomethingThatUsesXcodeRunner(t *testing.T) {
//
//		// make and configure a mocked internal.XcodeRunner
//		mockedXcodeRunner := &XcodeRunnerMock{
//			RunXcodeFunc: func(args []string) error {
//				panic("mock out the RunXcode method")
//			},
//		}
//
//		// use mockedXcodeRunner in code that requires internal.XcodeRunner
//		// and then make assertions.
//
//	}
type XcodeRunnerMock struct {
	// RunXcodeFunc mocks the RunXcode method.
	RunXcodeFunc func(args []string) error

	// calls tracks calls to the methods.
	calls struct {
		// RunXcode holds details about calls to the RunXcode method.
		RunXcode []struct {
			// Args is the args argument value.
			Args []string
		}
	}
	lockRunXcode sync.RWMutex
}

// RunXcode calls RunXcodeFunc.
func (mock *XcodeRunnerMock) RunXcode(args []string) error {
	if mock.RunXcodeFunc == nil {
		panic("XcodeRunnerMock.RunXcodeFunc: method is nil but XcodeRunner.RunXcode was just called")
	}
	callInfo := struct {
		Args []string
	}{
		Args: args,
	}
	mock.lockRunXcode.Lock()
	mock.calls.RunXcode = append(mock.calls.RunXcode, callInfo)
	mock.lockRunXcode.Unlock()
	return mock.RunXcodeFunc(args)
}

// RunXcodeCalls gets all the calls that were made to RunXcode.
// Check the length with:
//
//	len(mockedXcodeRunner.RunXcodeCalls())
func (mock *XcodeRunnerMock) RunXcodeCalls() []struct {
	Args []string
} {
	var calls []struct {
		Args []string
	}
	mock.lockRunXcode.RLock()
	calls = mock.calls.RunXcode
	mock.lockRunXcode.RUnlock()
	return calls
}
