// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/bitrise-io/xcelerate/internal"
)

// Ensure, that XcodeArgProviderMock does implement internal.XcodeArgProvider.
// If this is not the case, regenerate this file with moq.
var _ internal.XcodeArgProvider = &XcodeArgProviderMock{}

// XcodeArgProviderMock is a mock implementation of internal.XcodeArgProvider.
//
//	func TestSomethingThatUsesXcodeArgProvider(t *testing.T) {
//
//		// make and configure a mocked internal.XcodeArgProvider
//		mockedXcodeArgProvider := &XcodeArgProviderMock{
//			XcodeArgsFunc: func() []string {
//				panic("mock out the XcodeArgs method")
//			},
//		}
//
//		// use mockedXcodeArgProvider in code that requires internal.XcodeArgProvider
//		// and then make assertions.
//
//	}
type XcodeArgProviderMock struct {
	// XcodeArgsFunc mocks the XcodeArgs method.
	XcodeArgsFunc func() []string

	// calls tracks calls to the methods.
	calls struct {
		// XcodeArgs holds details about calls to the XcodeArgs method.
		XcodeArgs []struct {
		}
	}
	lockXcodeArgs sync.RWMutex
}

// XcodeArgs calls XcodeArgsFunc.
func (mock *XcodeArgProviderMock) XcodeArgs() []string {
	if mock.XcodeArgsFunc == nil {
		panic("XcodeArgProviderMock.XcodeArgsFunc: method is nil but XcodeArgProvider.XcodeArgs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockXcodeArgs.Lock()
	mock.calls.XcodeArgs = append(mock.calls.XcodeArgs, callInfo)
	mock.lockXcodeArgs.Unlock()
	return mock.XcodeArgsFunc()
}

// XcodeArgsCalls gets all the calls that were made to XcodeArgs.
// Check the length with:
//
//	len(mockedXcodeArgProvider.XcodeArgsCalls())
func (mock *XcodeArgProviderMock) XcodeArgsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockXcodeArgs.RLock()
	calls = mock.calls.XcodeArgs
	mock.lockXcodeArgs.RUnlock()
	return calls
}
