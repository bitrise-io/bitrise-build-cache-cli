// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/bitrise-io/xcelerate/internal"
)

// Ensure, that OriginalArgProviderMock does implement internal.OriginalArgProvider.
// If this is not the case, regenerate this file with moq.
var _ internal.OriginalArgProvider = &OriginalArgProviderMock{}

// OriginalArgProviderMock is a mock implementation of internal.OriginalArgProvider.
//
//	func TestSomethingThatUsesOriginalArgProvider(t *testing.T) {
//
//		// make and configure a mocked internal.OriginalArgProvider
//		mockedOriginalArgProvider := &OriginalArgProviderMock{
//			GetOriginalArgsFunc: func() []string {
//				panic("mock out the GetOriginalArgs method")
//			},
//		}
//
//		// use mockedOriginalArgProvider in code that requires internal.OriginalArgProvider
//		// and then make assertions.
//
//	}
type OriginalArgProviderMock struct {
	// GetOriginalArgsFunc mocks the GetOriginalArgs method.
	GetOriginalArgsFunc func() []string

	// calls tracks calls to the methods.
	calls struct {
		// GetOriginalArgs holds details about calls to the GetOriginalArgs method.
		GetOriginalArgs []struct {
		}
	}
	lockGetOriginalArgs sync.RWMutex
}

// GetOriginalArgs calls GetOriginalArgsFunc.
func (mock *OriginalArgProviderMock) GetOriginalArgs() []string {
	if mock.GetOriginalArgsFunc == nil {
		panic("OriginalArgProviderMock.GetOriginalArgsFunc: method is nil but OriginalArgProvider.GetOriginalArgs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOriginalArgs.Lock()
	mock.calls.GetOriginalArgs = append(mock.calls.GetOriginalArgs, callInfo)
	mock.lockGetOriginalArgs.Unlock()
	return mock.GetOriginalArgsFunc()
}

// GetOriginalArgsCalls gets all the calls that were made to GetOriginalArgs.
// Check the length with:
//
//	len(mockedOriginalArgProvider.GetOriginalArgsCalls())
func (mock *OriginalArgProviderMock) GetOriginalArgsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOriginalArgs.RLock()
	calls = mock.calls.GetOriginalArgs
	mock.lockGetOriginalArgs.RUnlock()
	return calls
}
