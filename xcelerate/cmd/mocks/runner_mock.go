// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitrise-io/bitrise-build-cache-cli/xcelerate/cmd"
	"sync"
)

// Ensure, that XcodeRunnerMock does implement cmd.XcodeRunner.
// If this is not the case, regenerate this file with moq.
var _ cmd.XcodeRunner = &XcodeRunnerMock{}

// XcodeRunnerMock is a mock implementation of cmd.XcodeRunner.
//
//	func TestSomethingThatUsesXcodeRunner(t *testing.T) {
//
//		// make and configure a mocked cmd.XcodeRunner
//		mockedXcodeRunner := &XcodeRunnerMock{
//			RunFunc: func(ctx context.Context, args []string) error {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedXcodeRunner in code that requires cmd.XcodeRunner
//		// and then make assertions.
//
//	}
type XcodeRunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, args []string) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args []string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *XcodeRunnerMock) Run(ctx context.Context, args []string) error {
	if mock.RunFunc == nil {
		panic("XcodeRunnerMock.RunFunc: method is nil but XcodeRunner.Run was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args []string
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, args)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedXcodeRunner.RunCalls())
func (mock *XcodeRunnerMock) RunCalls() []struct {
	Ctx  context.Context
	Args []string
} {
	var calls []struct {
		Ctx  context.Context
		Args []string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
