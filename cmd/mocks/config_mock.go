// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitrise-io/bitrise-build-cache-cli/cmd"
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
	"sync"
)

// Ensure, that XcelerateConfigMock does implement cmd.XcelerateConfig.
// If this is not the case, regenerate this file with moq.
var _ cmd.XcelerateConfig = &XcelerateConfigMock{}

// XcelerateConfigMock is a mock implementation of cmd.XcelerateConfig.
//
//	func TestSomethingThatUsesXcelerateConfig(t *testing.T) {
//
//		// make and configure a mocked cmd.XcelerateConfig
//		mockedXcelerateConfig := &XcelerateConfigMock{
//			SaveFunc: func(os utils.OsProxy, encoderFactory utils.EncoderFactory) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedXcelerateConfig in code that requires cmd.XcelerateConfig
//		// and then make assertions.
//
//	}
type XcelerateConfigMock struct {
	// SaveFunc mocks the Save method.
	SaveFunc func(os utils.OsProxy, encoderFactory utils.EncoderFactory) error

	// calls tracks calls to the methods.
	calls struct {
		// Save holds details about calls to the Save method.
		Save []struct {
			// Os is the os argument value.
			Os utils.OsProxy
			// EncoderFactory is the encoderFactory argument value.
			EncoderFactory utils.EncoderFactory
		}
	}
	lockSave sync.RWMutex
}

// Save calls SaveFunc.
func (mock *XcelerateConfigMock) Save(os utils.OsProxy, encoderFactory utils.EncoderFactory) error {
	if mock.SaveFunc == nil {
		panic("XcelerateConfigMock.SaveFunc: method is nil but XcelerateConfig.Save was just called")
	}
	callInfo := struct {
		Os             utils.OsProxy
		EncoderFactory utils.EncoderFactory
	}{
		Os:             os,
		EncoderFactory: encoderFactory,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(os, encoderFactory)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedXcelerateConfig.SaveCalls())
func (mock *XcelerateConfigMock) SaveCalls() []struct {
	Os             utils.OsProxy
	EncoderFactory utils.EncoderFactory
} {
	var calls []struct {
		Os             utils.OsProxy
		EncoderFactory utils.EncoderFactory
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
