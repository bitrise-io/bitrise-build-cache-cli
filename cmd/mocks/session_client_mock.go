// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	context "context"
	"github.com/bitrise-io/bitrise-build-cache-cli/proto/llvm/session"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// Ensure, that SessionClientMock does implement session.SessionClient.
// If this is not the case, regenerate this file with moq.
var _ session.SessionClient = &SessionClientMock{}

// SessionClientMock is a mock implementation of session.SessionClient.
//
//	func TestSomethingThatUsesSessionClient(t *testing.T) {
//
//		// make and configure a mocked session.SessionClient
//		mockedSessionClient := &SessionClientMock{
//			GetSessionStatsFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*session.GetSessionStatsResponse, error) {
//				panic("mock out the GetSessionStats method")
//			},
//			SetSessionFunc: func(ctx context.Context, in *session.SetSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the SetSession method")
//			},
//		}
//
//		// use mockedSessionClient in code that requires session.SessionClient
//		// and then make assertions.
//
//	}
type SessionClientMock struct {
	// GetSessionStatsFunc mocks the GetSessionStats method.
	GetSessionStatsFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*session.GetSessionStatsResponse, error)

	// SetSessionFunc mocks the SetSession method.
	SetSessionFunc func(ctx context.Context, in *session.SetSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSessionStats holds details about calls to the GetSessionStats method.
		GetSessionStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SetSession holds details about calls to the SetSession method.
		SetSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *session.SetSessionRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetSessionStats sync.RWMutex
	lockSetSession      sync.RWMutex
}

// GetSessionStats calls GetSessionStatsFunc.
func (mock *SessionClientMock) GetSessionStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*session.GetSessionStatsResponse, error) {
	if mock.GetSessionStatsFunc == nil {
		panic("SessionClientMock.GetSessionStatsFunc: method is nil but SessionClient.GetSessionStats was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetSessionStats.Lock()
	mock.calls.GetSessionStats = append(mock.calls.GetSessionStats, callInfo)
	mock.lockGetSessionStats.Unlock()
	return mock.GetSessionStatsFunc(ctx, in, opts...)
}

// GetSessionStatsCalls gets all the calls that were made to GetSessionStats.
// Check the length with:
//
//	len(mockedSessionClient.GetSessionStatsCalls())
func (mock *SessionClientMock) GetSessionStatsCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockGetSessionStats.RLock()
	calls = mock.calls.GetSessionStats
	mock.lockGetSessionStats.RUnlock()
	return calls
}

// SetSession calls SetSessionFunc.
func (mock *SessionClientMock) SetSession(ctx context.Context, in *session.SetSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.SetSessionFunc == nil {
		panic("SessionClientMock.SetSessionFunc: method is nil but SessionClient.SetSession was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *session.SetSessionRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSetSession.Lock()
	mock.calls.SetSession = append(mock.calls.SetSession, callInfo)
	mock.lockSetSession.Unlock()
	return mock.SetSessionFunc(ctx, in, opts...)
}

// SetSessionCalls gets all the calls that were made to SetSession.
// Check the length with:
//
//	len(mockedSessionClient.SetSessionCalls())
func (mock *SessionClientMock) SetSessionCalls() []struct {
	Ctx  context.Context
	In   *session.SetSessionRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *session.SetSessionRequest
		Opts []grpc.CallOption
	}
	mock.lockSetSession.RLock()
	calls = mock.calls.SetSession
	mock.lockSetSession.RUnlock()
	return calls
}
