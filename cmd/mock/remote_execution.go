// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	"github.com/bitrise-io/bitrise-build-cache-cli/proto/build/bazel/remote/execution/v2"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that CapabilitiesClientMock does implement remoteexecution.CapabilitiesClient.
// If this is not the case, regenerate this file with moq.
var _ remoteexecution.CapabilitiesClient = &CapabilitiesClientMock{}

// CapabilitiesClientMock is a mock implementation of remoteexecution.CapabilitiesClient.
//
//	func TestSomethingThatUsesCapabilitiesClient(t *testing.T) {
//
//		// make and configure a mocked remoteexecution.CapabilitiesClient
//		mockedCapabilitiesClient := &CapabilitiesClientMock{
//			GetCapabilitiesFunc: func(ctx context.Context, in *remoteexecution.GetCapabilitiesRequest, opts ...grpc.CallOption) (*remoteexecution.ServerCapabilities, error) {
//				panic("mock out the GetCapabilities method")
//			},
//		}
//
//		// use mockedCapabilitiesClient in code that requires remoteexecution.CapabilitiesClient
//		// and then make assertions.
//
//	}
type CapabilitiesClientMock struct {
	// GetCapabilitiesFunc mocks the GetCapabilities method.
	GetCapabilitiesFunc func(ctx context.Context, in *remoteexecution.GetCapabilitiesRequest, opts ...grpc.CallOption) (*remoteexecution.ServerCapabilities, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCapabilities holds details about calls to the GetCapabilities method.
		GetCapabilities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *remoteexecution.GetCapabilitiesRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetCapabilities sync.RWMutex
}

// GetCapabilities calls GetCapabilitiesFunc.
func (mock *CapabilitiesClientMock) GetCapabilities(ctx context.Context, in *remoteexecution.GetCapabilitiesRequest, opts ...grpc.CallOption) (*remoteexecution.ServerCapabilities, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *remoteexecution.GetCapabilitiesRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetCapabilities.Lock()
	mock.calls.GetCapabilities = append(mock.calls.GetCapabilities, callInfo)
	mock.lockGetCapabilities.Unlock()
	if mock.GetCapabilitiesFunc == nil {
		var (
			serverCapabilitiesOut *remoteexecution.ServerCapabilities
			errOut                error
		)
		return serverCapabilitiesOut, errOut
	}
	return mock.GetCapabilitiesFunc(ctx, in, opts...)
}

// GetCapabilitiesCalls gets all the calls that were made to GetCapabilities.
// Check the length with:
//
//	len(mockedCapabilitiesClient.GetCapabilitiesCalls())
func (mock *CapabilitiesClientMock) GetCapabilitiesCalls() []struct {
	Ctx  context.Context
	In   *remoteexecution.GetCapabilitiesRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *remoteexecution.GetCapabilitiesRequest
		Opts []grpc.CallOption
	}
	mock.lockGetCapabilities.RLock()
	calls = mock.calls.GetCapabilities
	mock.lockGetCapabilities.RUnlock()
	return calls
}
