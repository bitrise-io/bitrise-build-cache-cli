// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	sync "sync"

	"github.com/bitrise-io/bitrise-build-cache-cli/proto/kv_storage"
	bytestream "google.golang.org/genproto/googleapis/bytestream"
	grpc "google.golang.org/grpc"
)

// Ensure, that KVStorageClientMock does implement kv_storage.KVStorageClient.
// If this is not the case, regenerate this file with moq.
var _ kv_storage.KVStorageClient = &KVStorageClientMock{}

// KVStorageClientMock is a mock implementation of kv_storage.KVStorageClient.
//
//	func TestSomethingThatUsesKVStorageClient(t *testing.T) {
//
//		// make and configure a mocked kv_storage.KVStorageClient
//		mockedKVStorageClient := &KVStorageClientMock{
//			DeleteFunc: func(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (*kv_storage.DeleteResponse, error) {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[bytestream.ReadResponse], error) {
//				panic("mock out the Get method")
//			},
//			PutFunc: func(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[bytestream.WriteRequest, bytestream.WriteResponse], error) {
//				panic("mock out the Put method")
//			},
//		}
//
//		// use mockedKVStorageClient in code that requires kv_storage.KVStorageClient
//		// and then make assertions.
//
//	}
type KVStorageClientMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (*kv_storage.DeleteResponse, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[bytestream.ReadResponse], error)

	// PutFunc mocks the Put method.
	PutFunc func(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[bytestream.WriteRequest, bytestream.WriteResponse], error)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *bytestream.ReadRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *bytestream.ReadRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockPut    sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *KVStorageClientMock) Delete(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (*kv_storage.DeleteResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *bytestream.ReadRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	if mock.DeleteFunc == nil {
		var (
			deleteResponseOut *kv_storage.DeleteResponse
			errOut            error
		)
		return deleteResponseOut, errOut
	}
	return mock.DeleteFunc(ctx, in, opts...)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedKVStorageClient.DeleteCalls())
func (mock *KVStorageClientMock) DeleteCalls() []struct {
	Ctx  context.Context
	In   *bytestream.ReadRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *bytestream.ReadRequest
		Opts []grpc.CallOption
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *KVStorageClientMock) Get(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[bytestream.ReadResponse], error) {
	callInfo := struct {
		Ctx  context.Context
		In   *bytestream.ReadRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			serverStreamingClientOut grpc.ServerStreamingClient[bytestream.ReadResponse]
			errOut                   error
		)
		return serverStreamingClientOut, errOut
	}
	return mock.GetFunc(ctx, in, opts...)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedKVStorageClient.GetCalls())
func (mock *KVStorageClientMock) GetCalls() []struct {
	Ctx  context.Context
	In   *bytestream.ReadRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *bytestream.ReadRequest
		Opts []grpc.CallOption
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *KVStorageClientMock) Put(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[bytestream.WriteRequest, bytestream.WriteResponse], error) {
	callInfo := struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	if mock.PutFunc == nil {
		var (
			clientStreamingClientOut grpc.ClientStreamingClient[bytestream.WriteRequest, bytestream.WriteResponse]
			errOut                   error
		)
		return clientStreamingClientOut, errOut
	}
	return mock.PutFunc(ctx, opts...)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//
//	len(mockedKVStorageClient.PutCalls())
func (mock *KVStorageClientMock) PutCalls() []struct {
	Ctx  context.Context
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}
