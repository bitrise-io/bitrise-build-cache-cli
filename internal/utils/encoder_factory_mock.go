// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package utils

import (
	"io"
	"sync"
)

// Ensure, that MockEncoderFactory does implement EncoderFactory.
// If this is not the case, regenerate this file with moq.
var _ EncoderFactory = &MockEncoderFactory{}

// MockEncoderFactory is a mock implementation of EncoderFactory.
//
//	func TestSomethingThatUsesEncoderFactory(t *testing.T) {
//
//		// make and configure a mocked EncoderFactory
//		mockedEncoderFactory := &MockEncoderFactory{
//			EncoderFunc: func(v io.Writer) Encoder {
//				panic("mock out the Encoder method")
//			},
//		}
//
//		// use mockedEncoderFactory in code that requires EncoderFactory
//		// and then make assertions.
//
//	}
type MockEncoderFactory struct {
	// EncoderFunc mocks the Encoder method.
	EncoderFunc func(v io.Writer) Encoder

	// calls tracks calls to the methods.
	calls struct {
		// Encoder holds details about calls to the Encoder method.
		Encoder []struct {
			// V is the v argument value.
			V io.Writer
		}
	}
	lockEncoder sync.RWMutex
}

// Encoder calls EncoderFunc.
func (mock *MockEncoderFactory) Encoder(v io.Writer) Encoder {
	if mock.EncoderFunc == nil {
		panic("MockEncoderFactory.EncoderFunc: method is nil but EncoderFactory.Encoder was just called")
	}
	callInfo := struct {
		V io.Writer
	}{
		V: v,
	}
	mock.lockEncoder.Lock()
	mock.calls.Encoder = append(mock.calls.Encoder, callInfo)
	mock.lockEncoder.Unlock()
	return mock.EncoderFunc(v)
}

// EncoderCalls gets all the calls that were made to Encoder.
// Check the length with:
//
//	len(mockedEncoderFactory.EncoderCalls())
func (mock *MockEncoderFactory) EncoderCalls() []struct {
	V io.Writer
} {
	var calls []struct {
		V io.Writer
	}
	mock.lockEncoder.RLock()
	calls = mock.calls.Encoder
	mock.lockEncoder.RUnlock()
	return calls
}
