// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"
	"os"

	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEncoder creates a new instance of MockEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncoder {
	mock := &MockEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEncoder is an autogenerated mock type for the Encoder type
type MockEncoder struct {
	mock.Mock
}

type MockEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncoder) EXPECT() *MockEncoder_Expecter {
	return &MockEncoder_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function for the type MockEncoder
func (_mock *MockEncoder) Encode(data any) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockEncoder_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - data any
func (_e *MockEncoder_Expecter) Encode(data interface{}) *MockEncoder_Encode_Call {
	return &MockEncoder_Encode_Call{Call: _e.mock.On("Encode", data)}
}

func (_c *MockEncoder_Encode_Call) Run(run func(data any)) *MockEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncoder_Encode_Call) Return(err error) *MockEncoder_Encode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEncoder_Encode_Call) RunAndReturn(run func(data any) error) *MockEncoder_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// SetEscapeHTML provides a mock function for the type MockEncoder
func (_mock *MockEncoder) SetEscapeHTML(escape bool) {
	_mock.Called(escape)
	return
}

// MockEncoder_SetEscapeHTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEscapeHTML'
type MockEncoder_SetEscapeHTML_Call struct {
	*mock.Call
}

// SetEscapeHTML is a helper method to define mock.On call
//   - escape bool
func (_e *MockEncoder_Expecter) SetEscapeHTML(escape interface{}) *MockEncoder_SetEscapeHTML_Call {
	return &MockEncoder_SetEscapeHTML_Call{Call: _e.mock.On("SetEscapeHTML", escape)}
}

func (_c *MockEncoder_SetEscapeHTML_Call) Run(run func(escape bool)) *MockEncoder_SetEscapeHTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncoder_SetEscapeHTML_Call) Return() *MockEncoder_SetEscapeHTML_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEncoder_SetEscapeHTML_Call) RunAndReturn(run func(escape bool)) *MockEncoder_SetEscapeHTML_Call {
	_c.Run(run)
	return _c
}

// SetIndent provides a mock function for the type MockEncoder
func (_mock *MockEncoder) SetIndent(prefix string, indent string) {
	_mock.Called(prefix, indent)
	return
}

// MockEncoder_SetIndent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIndent'
type MockEncoder_SetIndent_Call struct {
	*mock.Call
}

// SetIndent is a helper method to define mock.On call
//   - prefix string
//   - indent string
func (_e *MockEncoder_Expecter) SetIndent(prefix interface{}, indent interface{}) *MockEncoder_SetIndent_Call {
	return &MockEncoder_SetIndent_Call{Call: _e.mock.On("SetIndent", prefix, indent)}
}

func (_c *MockEncoder_SetIndent_Call) Run(run func(prefix string, indent string)) *MockEncoder_SetIndent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEncoder_SetIndent_Call) Return() *MockEncoder_SetIndent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEncoder_SetIndent_Call) RunAndReturn(run func(prefix string, indent string)) *MockEncoder_SetIndent_Call {
	_c.Run(run)
	return _c
}

// NewMockEncoderFactory creates a new instance of MockEncoderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncoderFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncoderFactory {
	mock := &MockEncoderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEncoderFactory is an autogenerated mock type for the EncoderFactory type
type MockEncoderFactory struct {
	mock.Mock
}

type MockEncoderFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncoderFactory) EXPECT() *MockEncoderFactory_Expecter {
	return &MockEncoderFactory_Expecter{mock: &_m.Mock}
}

// Encoder provides a mock function for the type MockEncoderFactory
func (_mock *MockEncoderFactory) Encoder(v io.Writer) utils.Encoder {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Encoder")
	}

	var r0 utils.Encoder
	if returnFunc, ok := ret.Get(0).(func(io.Writer) utils.Encoder); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.Encoder)
		}
	}
	return r0
}

// MockEncoderFactory_Encoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encoder'
type MockEncoderFactory_Encoder_Call struct {
	*mock.Call
}

// Encoder is a helper method to define mock.On call
//   - v io.Writer
func (_e *MockEncoderFactory_Expecter) Encoder(v interface{}) *MockEncoderFactory_Encoder_Call {
	return &MockEncoderFactory_Encoder_Call{Call: _e.mock.On("Encoder", v)}
}

func (_c *MockEncoderFactory_Encoder_Call) Run(run func(v io.Writer)) *MockEncoderFactory_Encoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Writer
		if args[0] != nil {
			arg0 = args[0].(io.Writer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncoderFactory_Encoder_Call) Return(encoder utils.Encoder) *MockEncoderFactory_Encoder_Call {
	_c.Call.Return(encoder)
	return _c
}

func (_c *MockEncoderFactory_Encoder_Call) RunAndReturn(run func(v io.Writer) utils.Encoder) *MockEncoderFactory_Encoder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOsProxy creates a new instance of MockOsProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOsProxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOsProxy {
	mock := &MockOsProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOsProxy is an autogenerated mock type for the OsProxy type
type MockOsProxy struct {
	mock.Mock
}

type MockOsProxy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOsProxy) EXPECT() *MockOsProxy_Expecter {
	return &MockOsProxy_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOsProxy
func (_mock *MockOsProxy) Create(s string) (*os.File, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOsProxy_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOsProxy_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - s string
func (_e *MockOsProxy_Expecter) Create(s interface{}) *MockOsProxy_Create_Call {
	return &MockOsProxy_Create_Call{Call: _e.mock.On("Create", s)}
}

func (_c *MockOsProxy_Create_Call) Run(run func(s string)) *MockOsProxy_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOsProxy_Create_Call) Return(file *os.File, err error) *MockOsProxy_Create_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockOsProxy_Create_Call) RunAndReturn(run func(s string) (*os.File, error)) *MockOsProxy_Create_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function for the type MockOsProxy
func (_mock *MockOsProxy) MkdirAll(s string, v os.FileMode) error {
	ret := _mock.Called(s, v)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(s, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOsProxy_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockOsProxy_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - s string
//   - v os.FileMode
func (_e *MockOsProxy_Expecter) MkdirAll(s interface{}, v interface{}) *MockOsProxy_MkdirAll_Call {
	return &MockOsProxy_MkdirAll_Call{Call: _e.mock.On("MkdirAll", s, v)}
}

func (_c *MockOsProxy_MkdirAll_Call) Run(run func(s string, v os.FileMode)) *MockOsProxy_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOsProxy_MkdirAll_Call) Return(err error) *MockOsProxy_MkdirAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOsProxy_MkdirAll_Call) RunAndReturn(run func(s string, v os.FileMode) error) *MockOsProxy_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFileIfExists provides a mock function for the type MockOsProxy
func (_mock *MockOsProxy) ReadFileIfExists(pth string) (string, bool, error) {
	ret := _mock.Called(pth)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileIfExists")
	}

	var r0 string
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, bool, error)); ok {
		return returnFunc(pth)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(pth)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(pth)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(pth)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOsProxy_ReadFileIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFileIfExists'
type MockOsProxy_ReadFileIfExists_Call struct {
	*mock.Call
}

// ReadFileIfExists is a helper method to define mock.On call
//   - pth string
func (_e *MockOsProxy_Expecter) ReadFileIfExists(pth interface{}) *MockOsProxy_ReadFileIfExists_Call {
	return &MockOsProxy_ReadFileIfExists_Call{Call: _e.mock.On("ReadFileIfExists", pth)}
}

func (_c *MockOsProxy_ReadFileIfExists_Call) Run(run func(pth string)) *MockOsProxy_ReadFileIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOsProxy_ReadFileIfExists_Call) Return(s string, b bool, err error) *MockOsProxy_ReadFileIfExists_Call {
	_c.Call.Return(s, b, err)
	return _c
}

func (_c *MockOsProxy_ReadFileIfExists_Call) RunAndReturn(run func(pth string) (string, bool, error)) *MockOsProxy_ReadFileIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function for the type MockOsProxy
func (_mock *MockOsProxy) UserHomeDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOsProxy_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type MockOsProxy_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *MockOsProxy_Expecter) UserHomeDir() *MockOsProxy_UserHomeDir_Call {
	return &MockOsProxy_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *MockOsProxy_UserHomeDir_Call) Run(run func()) *MockOsProxy_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOsProxy_UserHomeDir_Call) Return(s string, err error) *MockOsProxy_UserHomeDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockOsProxy_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *MockOsProxy_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockOsProxy
func (_mock *MockOsProxy) WriteFile(s string, bytes []byte, v os.FileMode) error {
	ret := _mock.Called(s, bytes, v)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = returnFunc(s, bytes, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOsProxy_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockOsProxy_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - s string
//   - bytes []byte
//   - v os.FileMode
func (_e *MockOsProxy_Expecter) WriteFile(s interface{}, bytes interface{}, v interface{}) *MockOsProxy_WriteFile_Call {
	return &MockOsProxy_WriteFile_Call{Call: _e.mock.On("WriteFile", s, bytes, v)}
}

func (_c *MockOsProxy_WriteFile_Call) Run(run func(s string, bytes []byte, v os.FileMode)) *MockOsProxy_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOsProxy_WriteFile_Call) Return(err error) *MockOsProxy_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOsProxy_WriteFile_Call) RunAndReturn(run func(s string, bytes []byte, v os.FileMode) error) *MockOsProxy_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
