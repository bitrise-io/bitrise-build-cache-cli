// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
	"io"
	"sync"
)

// Ensure, that DecoderFactoryMock does implement utils.DecoderFactory.
// If this is not the case, regenerate this file with moq.
var _ utils.DecoderFactory = &DecoderFactoryMock{}

// DecoderFactoryMock is a mock implementation of utils.DecoderFactory.
//
//	func TestSomethingThatUsesDecoderFactory(t *testing.T) {
//
//		// make and configure a mocked utils.DecoderFactory
//		mockedDecoderFactory := &DecoderFactoryMock{
//			DecoderFunc: func(r io.Reader) utils.Decoder {
//				panic("mock out the Decoder method")
//			},
//		}
//
//		// use mockedDecoderFactory in code that requires utils.DecoderFactory
//		// and then make assertions.
//
//	}
type DecoderFactoryMock struct {
	// DecoderFunc mocks the Decoder method.
	DecoderFunc func(r io.Reader) utils.Decoder

	// calls tracks calls to the methods.
	calls struct {
		// Decoder holds details about calls to the Decoder method.
		Decoder []struct {
			// R is the r argument value.
			R io.Reader
		}
	}
	lockDecoder sync.RWMutex
}

// Decoder calls DecoderFunc.
func (mock *DecoderFactoryMock) Decoder(r io.Reader) utils.Decoder {
	if mock.DecoderFunc == nil {
		panic("DecoderFactoryMock.DecoderFunc: method is nil but DecoderFactory.Decoder was just called")
	}
	callInfo := struct {
		R io.Reader
	}{
		R: r,
	}
	mock.lockDecoder.Lock()
	mock.calls.Decoder = append(mock.calls.Decoder, callInfo)
	mock.lockDecoder.Unlock()
	return mock.DecoderFunc(r)
}

// DecoderCalls gets all the calls that were made to Decoder.
// Check the length with:
//
//	len(mockedDecoderFactory.DecoderCalls())
func (mock *DecoderFactoryMock) DecoderCalls() []struct {
	R io.Reader
} {
	var calls []struct {
		R io.Reader
	}
	mock.lockDecoder.RLock()
	calls = mock.calls.Decoder
	mock.lockDecoder.RUnlock()
	return calls
}
