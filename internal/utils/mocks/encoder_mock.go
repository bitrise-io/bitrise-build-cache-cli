// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
)

// Ensure, that EncoderMock does implement utils.Encoder.
// If this is not the case, regenerate this file with moq.
var _ utils.Encoder = &EncoderMock{}

// EncoderMock is a mock implementation of utils.Encoder.
//
//	func TestSomethingThatUsesEncoder(t *testing.T) {
//
//		// make and configure a mocked utils.Encoder
//		mockedEncoder := &EncoderMock{
//			EncodeFunc: func(data any) error {
//				panic("mock out the Encode method")
//			},
//			SetEscapeHTMLFunc: func(escape bool)  {
//				panic("mock out the SetEscapeHTML method")
//			},
//			SetIndentFunc: func(prefix string, indent string)  {
//				panic("mock out the SetIndent method")
//			},
//		}
//
//		// use mockedEncoder in code that requires utils.Encoder
//		// and then make assertions.
//
//	}
type EncoderMock struct {
	// EncodeFunc mocks the Encode method.
	EncodeFunc func(data any) error

	// SetEscapeHTMLFunc mocks the SetEscapeHTML method.
	SetEscapeHTMLFunc func(escape bool)

	// SetIndentFunc mocks the SetIndent method.
	SetIndentFunc func(prefix string, indent string)

	// calls tracks calls to the methods.
	calls struct {
		// Encode holds details about calls to the Encode method.
		Encode []struct {
			// Data is the data argument value.
			Data any
		}
		// SetEscapeHTML holds details about calls to the SetEscapeHTML method.
		SetEscapeHTML []struct {
			// Escape is the escape argument value.
			Escape bool
		}
		// SetIndent holds details about calls to the SetIndent method.
		SetIndent []struct {
			// Prefix is the prefix argument value.
			Prefix string
			// Indent is the indent argument value.
			Indent string
		}
	}
	lockEncode        sync.RWMutex
	lockSetEscapeHTML sync.RWMutex
	lockSetIndent     sync.RWMutex
}

// Encode calls EncodeFunc.
func (mock *EncoderMock) Encode(data any) error {
	if mock.EncodeFunc == nil {
		panic("EncoderMock.EncodeFunc: method is nil but Encoder.Encode was just called")
	}
	callInfo := struct {
		Data any
	}{
		Data: data,
	}
	mock.lockEncode.Lock()
	mock.calls.Encode = append(mock.calls.Encode, callInfo)
	mock.lockEncode.Unlock()
	return mock.EncodeFunc(data)
}

// EncodeCalls gets all the calls that were made to Encode.
// Check the length with:
//
//	len(mockedEncoder.EncodeCalls())
func (mock *EncoderMock) EncodeCalls() []struct {
	Data any
} {
	var calls []struct {
		Data any
	}
	mock.lockEncode.RLock()
	calls = mock.calls.Encode
	mock.lockEncode.RUnlock()
	return calls
}

// SetEscapeHTML calls SetEscapeHTMLFunc.
func (mock *EncoderMock) SetEscapeHTML(escape bool) {
	if mock.SetEscapeHTMLFunc == nil {
		panic("EncoderMock.SetEscapeHTMLFunc: method is nil but Encoder.SetEscapeHTML was just called")
	}
	callInfo := struct {
		Escape bool
	}{
		Escape: escape,
	}
	mock.lockSetEscapeHTML.Lock()
	mock.calls.SetEscapeHTML = append(mock.calls.SetEscapeHTML, callInfo)
	mock.lockSetEscapeHTML.Unlock()
	mock.SetEscapeHTMLFunc(escape)
}

// SetEscapeHTMLCalls gets all the calls that were made to SetEscapeHTML.
// Check the length with:
//
//	len(mockedEncoder.SetEscapeHTMLCalls())
func (mock *EncoderMock) SetEscapeHTMLCalls() []struct {
	Escape bool
} {
	var calls []struct {
		Escape bool
	}
	mock.lockSetEscapeHTML.RLock()
	calls = mock.calls.SetEscapeHTML
	mock.lockSetEscapeHTML.RUnlock()
	return calls
}

// SetIndent calls SetIndentFunc.
func (mock *EncoderMock) SetIndent(prefix string, indent string) {
	if mock.SetIndentFunc == nil {
		panic("EncoderMock.SetIndentFunc: method is nil but Encoder.SetIndent was just called")
	}
	callInfo := struct {
		Prefix string
		Indent string
	}{
		Prefix: prefix,
		Indent: indent,
	}
	mock.lockSetIndent.Lock()
	mock.calls.SetIndent = append(mock.calls.SetIndent, callInfo)
	mock.lockSetIndent.Unlock()
	mock.SetIndentFunc(prefix, indent)
}

// SetIndentCalls gets all the calls that were made to SetIndent.
// Check the length with:
//
//	len(mockedEncoder.SetIndentCalls())
func (mock *EncoderMock) SetIndentCalls() []struct {
	Prefix string
	Indent string
} {
	var calls []struct {
		Prefix string
		Indent string
	}
	mock.lockSetIndent.RLock()
	calls = mock.calls.SetIndent
	mock.lockSetIndent.RUnlock()
	return calls
}
