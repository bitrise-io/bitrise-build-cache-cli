// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/xcelerate/xcodeargs"
	"sync"
)

// Ensure, that XcodeArgsMock does implement xcodeargs.XcodeArgs.
// If this is not the case, regenerate this file with moq.
var _ xcodeargs.XcodeArgs = &XcodeArgsMock{}

// XcodeArgsMock is a mock implementation of xcodeargs.XcodeArgs.
//
//	func TestSomethingThatUsesXcodeArgs(t *testing.T) {
//
//		// make and configure a mocked xcodeargs.XcodeArgs
//		mockedXcodeArgs := &XcodeArgsMock{
//			ArgsFunc: func(additional map[string]string) []string {
//				panic("mock out the Args method")
//			},
//			CommandFunc: func() string {
//				panic("mock out the Command method")
//			},
//			ShortCommandFunc: func() string {
//				panic("mock out the ShortCommand method")
//			},
//		}
//
//		// use mockedXcodeArgs in code that requires xcodeargs.XcodeArgs
//		// and then make assertions.
//
//	}
type XcodeArgsMock struct {
	// ArgsFunc mocks the Args method.
	ArgsFunc func(additional map[string]string) []string

	// CommandFunc mocks the Command method.
	CommandFunc func() string

	// ShortCommandFunc mocks the ShortCommand method.
	ShortCommandFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Args holds details about calls to the Args method.
		Args []struct {
			// Additional is the additional argument value.
			Additional map[string]string
		}
		// Command holds details about calls to the Command method.
		Command []struct {
		}
		// ShortCommand holds details about calls to the ShortCommand method.
		ShortCommand []struct {
		}
	}
	lockArgs         sync.RWMutex
	lockCommand      sync.RWMutex
	lockShortCommand sync.RWMutex
}

// Args calls ArgsFunc.
func (mock *XcodeArgsMock) Args(additional map[string]string) []string {
	if mock.ArgsFunc == nil {
		panic("XcodeArgsMock.ArgsFunc: method is nil but XcodeArgs.Args was just called")
	}
	callInfo := struct {
		Additional map[string]string
	}{
		Additional: additional,
	}
	mock.lockArgs.Lock()
	mock.calls.Args = append(mock.calls.Args, callInfo)
	mock.lockArgs.Unlock()
	return mock.ArgsFunc(additional)
}

// ArgsCalls gets all the calls that were made to Args.
// Check the length with:
//
//	len(mockedXcodeArgs.ArgsCalls())
func (mock *XcodeArgsMock) ArgsCalls() []struct {
	Additional map[string]string
} {
	var calls []struct {
		Additional map[string]string
	}
	mock.lockArgs.RLock()
	calls = mock.calls.Args
	mock.lockArgs.RUnlock()
	return calls
}

// Command calls CommandFunc.
func (mock *XcodeArgsMock) Command() string {
	if mock.CommandFunc == nil {
		panic("XcodeArgsMock.CommandFunc: method is nil but XcodeArgs.Command was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCommand.Lock()
	mock.calls.Command = append(mock.calls.Command, callInfo)
	mock.lockCommand.Unlock()
	return mock.CommandFunc()
}

// CommandCalls gets all the calls that were made to Command.
// Check the length with:
//
//	len(mockedXcodeArgs.CommandCalls())
func (mock *XcodeArgsMock) CommandCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommand.RLock()
	calls = mock.calls.Command
	mock.lockCommand.RUnlock()
	return calls
}

// ShortCommand calls ShortCommandFunc.
func (mock *XcodeArgsMock) ShortCommand() string {
	if mock.ShortCommandFunc == nil {
		panic("XcodeArgsMock.ShortCommandFunc: method is nil but XcodeArgs.ShortCommand was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShortCommand.Lock()
	mock.calls.ShortCommand = append(mock.calls.ShortCommand, callInfo)
	mock.lockShortCommand.Unlock()
	return mock.ShortCommandFunc()
}

// ShortCommandCalls gets all the calls that were made to ShortCommand.
// Check the length with:
//
//	len(mockedXcodeArgs.ShortCommandCalls())
func (mock *XcodeArgsMock) ShortCommandCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShortCommand.RLock()
	calls = mock.calls.ShortCommand
	mock.lockShortCommand.RUnlock()
	return calls
}
