// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/config/xcelerate"
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
	"sync"
)

// Ensure, that ConfigMock does implement xcelerate.Config.
// If this is not the case, regenerate this file with moq.
var _ xcelerate.Config = &ConfigMock{}

// ConfigMock is a mock implementation of xcelerate.Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked xcelerate.Config
//		mockedConfig := &ConfigMock{
//			GetBuildCacheEnabledFunc: func() bool {
//				panic("mock out the GetBuildCacheEnabled method")
//			},
//			GetOriginalXcodebuildPathFunc: func() string {
//				panic("mock out the GetOriginalXcodebuildPath method")
//			},
//			GetProxyVersionFunc: func() string {
//				panic("mock out the GetProxyVersion method")
//			},
//			GetWrapperVersionFunc: func() string {
//				panic("mock out the GetWrapperVersion method")
//			},
//			SaveFunc: func(os utils.OsProxy, encoderFactory utils.EncoderFactory) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedConfig in code that requires xcelerate.Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// GetBuildCacheEnabledFunc mocks the GetBuildCacheEnabled method.
	GetBuildCacheEnabledFunc func() bool

	// GetOriginalXcodebuildPathFunc mocks the GetOriginalXcodebuildPath method.
	GetOriginalXcodebuildPathFunc func() string

	// GetProxyVersionFunc mocks the GetProxyVersion method.
	GetProxyVersionFunc func() string

	// GetWrapperVersionFunc mocks the GetWrapperVersion method.
	GetWrapperVersionFunc func() string

	// SaveFunc mocks the Save method.
	SaveFunc func(os utils.OsProxy, encoderFactory utils.EncoderFactory) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBuildCacheEnabled holds details about calls to the GetBuildCacheEnabled method.
		GetBuildCacheEnabled []struct {
		}
		// GetOriginalXcodebuildPath holds details about calls to the GetOriginalXcodebuildPath method.
		GetOriginalXcodebuildPath []struct {
		}
		// GetProxyVersion holds details about calls to the GetProxyVersion method.
		GetProxyVersion []struct {
		}
		// GetWrapperVersion holds details about calls to the GetWrapperVersion method.
		GetWrapperVersion []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Os is the os argument value.
			Os utils.OsProxy
			// EncoderFactory is the encoderFactory argument value.
			EncoderFactory utils.EncoderFactory
		}
	}
	lockGetBuildCacheEnabled      sync.RWMutex
	lockGetOriginalXcodebuildPath sync.RWMutex
	lockGetProxyVersion           sync.RWMutex
	lockGetWrapperVersion         sync.RWMutex
	lockSave                      sync.RWMutex
}

// GetBuildCacheEnabled calls GetBuildCacheEnabledFunc.
func (mock *ConfigMock) GetBuildCacheEnabled() bool {
	if mock.GetBuildCacheEnabledFunc == nil {
		panic("ConfigMock.GetBuildCacheEnabledFunc: method is nil but Config.GetBuildCacheEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBuildCacheEnabled.Lock()
	mock.calls.GetBuildCacheEnabled = append(mock.calls.GetBuildCacheEnabled, callInfo)
	mock.lockGetBuildCacheEnabled.Unlock()
	return mock.GetBuildCacheEnabledFunc()
}

// GetBuildCacheEnabledCalls gets all the calls that were made to GetBuildCacheEnabled.
// Check the length with:
//
//	len(mockedConfig.GetBuildCacheEnabledCalls())
func (mock *ConfigMock) GetBuildCacheEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBuildCacheEnabled.RLock()
	calls = mock.calls.GetBuildCacheEnabled
	mock.lockGetBuildCacheEnabled.RUnlock()
	return calls
}

// GetOriginalXcodebuildPath calls GetOriginalXcodebuildPathFunc.
func (mock *ConfigMock) GetOriginalXcodebuildPath() string {
	if mock.GetOriginalXcodebuildPathFunc == nil {
		panic("ConfigMock.GetOriginalXcodebuildPathFunc: method is nil but Config.GetOriginalXcodebuildPath was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOriginalXcodebuildPath.Lock()
	mock.calls.GetOriginalXcodebuildPath = append(mock.calls.GetOriginalXcodebuildPath, callInfo)
	mock.lockGetOriginalXcodebuildPath.Unlock()
	return mock.GetOriginalXcodebuildPathFunc()
}

// GetOriginalXcodebuildPathCalls gets all the calls that were made to GetOriginalXcodebuildPath.
// Check the length with:
//
//	len(mockedConfig.GetOriginalXcodebuildPathCalls())
func (mock *ConfigMock) GetOriginalXcodebuildPathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOriginalXcodebuildPath.RLock()
	calls = mock.calls.GetOriginalXcodebuildPath
	mock.lockGetOriginalXcodebuildPath.RUnlock()
	return calls
}

// GetProxyVersion calls GetProxyVersionFunc.
func (mock *ConfigMock) GetProxyVersion() string {
	if mock.GetProxyVersionFunc == nil {
		panic("ConfigMock.GetProxyVersionFunc: method is nil but Config.GetProxyVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetProxyVersion.Lock()
	mock.calls.GetProxyVersion = append(mock.calls.GetProxyVersion, callInfo)
	mock.lockGetProxyVersion.Unlock()
	return mock.GetProxyVersionFunc()
}

// GetProxyVersionCalls gets all the calls that were made to GetProxyVersion.
// Check the length with:
//
//	len(mockedConfig.GetProxyVersionCalls())
func (mock *ConfigMock) GetProxyVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetProxyVersion.RLock()
	calls = mock.calls.GetProxyVersion
	mock.lockGetProxyVersion.RUnlock()
	return calls
}

// GetWrapperVersion calls GetWrapperVersionFunc.
func (mock *ConfigMock) GetWrapperVersion() string {
	if mock.GetWrapperVersionFunc == nil {
		panic("ConfigMock.GetWrapperVersionFunc: method is nil but Config.GetWrapperVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWrapperVersion.Lock()
	mock.calls.GetWrapperVersion = append(mock.calls.GetWrapperVersion, callInfo)
	mock.lockGetWrapperVersion.Unlock()
	return mock.GetWrapperVersionFunc()
}

// GetWrapperVersionCalls gets all the calls that were made to GetWrapperVersion.
// Check the length with:
//
//	len(mockedConfig.GetWrapperVersionCalls())
func (mock *ConfigMock) GetWrapperVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWrapperVersion.RLock()
	calls = mock.calls.GetWrapperVersion
	mock.lockGetWrapperVersion.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ConfigMock) Save(os utils.OsProxy, encoderFactory utils.EncoderFactory) error {
	if mock.SaveFunc == nil {
		panic("ConfigMock.SaveFunc: method is nil but Config.Save was just called")
	}
	callInfo := struct {
		Os             utils.OsProxy
		EncoderFactory utils.EncoderFactory
	}{
		Os:             os,
		EncoderFactory: encoderFactory,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(os, encoderFactory)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedConfig.SaveCalls())
func (mock *ConfigMock) SaveCalls() []struct {
	Os             utils.OsProxy
	EncoderFactory utils.EncoderFactory
} {
	var calls []struct {
		Os             utils.OsProxy
		EncoderFactory utils.EncoderFactory
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
