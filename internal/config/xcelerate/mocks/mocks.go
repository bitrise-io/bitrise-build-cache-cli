// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/bitrise-io/bitrise-build-cache-cli/internal/utils"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// GetBuildCacheEnabled provides a mock function for the type MockConfig
func (_mock *MockConfig) GetBuildCacheEnabled() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBuildCacheEnabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfig_GetBuildCacheEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildCacheEnabled'
type MockConfig_GetBuildCacheEnabled_Call struct {
	*mock.Call
}

// GetBuildCacheEnabled is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetBuildCacheEnabled() *MockConfig_GetBuildCacheEnabled_Call {
	return &MockConfig_GetBuildCacheEnabled_Call{Call: _e.mock.On("GetBuildCacheEnabled")}
}

func (_c *MockConfig_GetBuildCacheEnabled_Call) Run(run func()) *MockConfig_GetBuildCacheEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetBuildCacheEnabled_Call) Return(b bool) *MockConfig_GetBuildCacheEnabled_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfig_GetBuildCacheEnabled_Call) RunAndReturn(run func() bool) *MockConfig_GetBuildCacheEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginalXcodebuildPath provides a mock function for the type MockConfig
func (_mock *MockConfig) GetOriginalXcodebuildPath() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalXcodebuildPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfig_GetOriginalXcodebuildPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalXcodebuildPath'
type MockConfig_GetOriginalXcodebuildPath_Call struct {
	*mock.Call
}

// GetOriginalXcodebuildPath is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetOriginalXcodebuildPath() *MockConfig_GetOriginalXcodebuildPath_Call {
	return &MockConfig_GetOriginalXcodebuildPath_Call{Call: _e.mock.On("GetOriginalXcodebuildPath")}
}

func (_c *MockConfig_GetOriginalXcodebuildPath_Call) Run(run func()) *MockConfig_GetOriginalXcodebuildPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetOriginalXcodebuildPath_Call) Return(s string) *MockConfig_GetOriginalXcodebuildPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfig_GetOriginalXcodebuildPath_Call) RunAndReturn(run func() string) *MockConfig_GetOriginalXcodebuildPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetProxyVersion provides a mock function for the type MockConfig
func (_mock *MockConfig) GetProxyVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProxyVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfig_GetProxyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProxyVersion'
type MockConfig_GetProxyVersion_Call struct {
	*mock.Call
}

// GetProxyVersion is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetProxyVersion() *MockConfig_GetProxyVersion_Call {
	return &MockConfig_GetProxyVersion_Call{Call: _e.mock.On("GetProxyVersion")}
}

func (_c *MockConfig_GetProxyVersion_Call) Run(run func()) *MockConfig_GetProxyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetProxyVersion_Call) Return(s string) *MockConfig_GetProxyVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfig_GetProxyVersion_Call) RunAndReturn(run func() string) *MockConfig_GetProxyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetWrapperVersion provides a mock function for the type MockConfig
func (_mock *MockConfig) GetWrapperVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWrapperVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfig_GetWrapperVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWrapperVersion'
type MockConfig_GetWrapperVersion_Call struct {
	*mock.Call
}

// GetWrapperVersion is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetWrapperVersion() *MockConfig_GetWrapperVersion_Call {
	return &MockConfig_GetWrapperVersion_Call{Call: _e.mock.On("GetWrapperVersion")}
}

func (_c *MockConfig_GetWrapperVersion_Call) Run(run func()) *MockConfig_GetWrapperVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetWrapperVersion_Call) Return(s string) *MockConfig_GetWrapperVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfig_GetWrapperVersion_Call) RunAndReturn(run func() string) *MockConfig_GetWrapperVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockConfig
func (_mock *MockConfig) Save(os utils.OsProxy, encoderFactory utils.EncoderFactory) error {
	ret := _mock.Called(os, encoderFactory)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(utils.OsProxy, utils.EncoderFactory) error); ok {
		r0 = returnFunc(os, encoderFactory)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfig_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConfig_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - os utils.OsProxy
//   - encoderFactory utils.EncoderFactory
func (_e *MockConfig_Expecter) Save(os interface{}, encoderFactory interface{}) *MockConfig_Save_Call {
	return &MockConfig_Save_Call{Call: _e.mock.On("Save", os, encoderFactory)}
}

func (_c *MockConfig_Save_Call) Run(run func(os utils.OsProxy, encoderFactory utils.EncoderFactory)) *MockConfig_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 utils.OsProxy
		if args[0] != nil {
			arg0 = args[0].(utils.OsProxy)
		}
		var arg1 utils.EncoderFactory
		if args[1] != nil {
			arg1 = args[1].(utils.EncoderFactory)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfig_Save_Call) Return(err error) *MockConfig_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfig_Save_Call) RunAndReturn(run func(os utils.OsProxy, encoderFactory utils.EncoderFactory) error) *MockConfig_Save_Call {
	_c.Call.Return(run)
	return _c
}
