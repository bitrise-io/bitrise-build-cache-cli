initscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
        {{- if .MetricsEnabled }}
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        {{- end }}
    }

    dependencies {
        classpath 'io.bitrise.gradle:remote-cache:{{ .CacheVersion }}'
        {{- if .MetricsEnabled }}
        classpath 'io.bitrise.gradle:gradle-analytics:{{ .MetricsVersion }}'
        {{- end }}
    }
}

{{- if .MetricsEnabled }}

println('[BITRISE BUILD CACHE] Gradle Metrics collection: on')
rootProject {
    apply plugin: io.bitrise.gradle.analytics.AnalyticsPlugin

    analytics {
        ignoreErrors = false
        bitrise {
            remote {
                authorization = '{{ .AuthToken }}'
                endpoint = '{{ .MetricsEndpoint }}'
                port = {{ .MetricsPort }}
            }
        }
    }

    // Configure the analytics producer task to run at the end of the build, no matter what tasks are executed
    allprojects {
        tasks.configureEach {
            if (name != "producer") {
                // The producer task is defined in the root project only, but we are in the allprojects {} block,
                // so this special syntax is needed to reference the root project task
                finalizedBy ":producer"
            }
        }
    }
}
{{- end }}

import io.bitrise.gradle.cache.BitriseBuildCache
import io.bitrise.gradle.cache.BitriseBuildCacheServiceFactory

gradle.settingsEvaluated { settings ->
    settings.buildCache {
        local {
            enabled = true
        }

        registerBuildCacheService(BitriseBuildCache.class, BitriseBuildCacheServiceFactory.class)
        remote(BitriseBuildCache.class) {
            endpoint = '{{ .EndpointURL }}'
            println('[BITRISE BUILD CACHE] endpoint: ' + endpoint)
            authToken = '{{ .AuthToken }}'
            enabled = true
            push = {{ .PushEnabled }}
            println('[BITRISE BUILD CACHE] push: ' + push)
            debug = {{ .DebugEnabled }}
            blobValidationLevel = '{{ .ValidationLevel }}'
        }
    }
}
