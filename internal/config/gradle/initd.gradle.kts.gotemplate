import io.bitrise.gradle.cache.BitriseBuildCache
import io.bitrise.gradle.cache.BitriseBuildCacheServiceFactory 

initscript {
    repositories {
        mavenLocal()
        maven(url="https://us-maven.pkg.dev/ip-build-cache-prod/build-cache-maven")
        maven(url="https://plugins.gradle.org/m2/")
        mavenCentral()
        google()
        maven(url="https://jitpack.io")
    }
    dependencies {
        {{- if .Analytics.Dependency }}
        classpath("io.bitrise.gradle:gradle-analytics:{{ .Analytics.Version }}")
        {{- end }}
        {{- if .Cache.Dependency }}
        classpath("io.bitrise.gradle:remote-cache:{{ .Cache.Version }}")
        {{- end }}
        {{- if .TestDistro.Dependency }}
        classpath("io.bitrise.gradle:test-distribution:{{ .TestDistro.Version }}")
        {{- end }}
    }
}

settingsEvaluated {
    {{- if .Cache.Enabled }}
    buildCache {
        local {
            isEnabled = false
        }

        registerBuildCacheService(BitriseBuildCache::class.java, BitriseBuildCacheServiceFactory::class.java)
        remote(BitriseBuildCache::class.java) {
            endpoint.set("{{ .Cache.EndpointURLWithPort }}")
            authToken.set("{{ .AuthToken }}")
            isPush.set({{ .Cache.IsPushEnabled }})
            debug.set({{ .IsDebugEnabled }})
            blobValidationLevel.set("{{ .Cache.ValidationLevel }}")
            {{- if .Analytics.Enabled }}
            collectMetadata.set(false)
            {{- end }}
        }
    }
    {{- end }}
    {{- if .Analytics.Enabled }}
    rootProject {
        apply<io.bitrise.gradle.analytics.AnalyticsPlugin>()
        extensions.configure<io.bitrise.gradle.analytics.AnalyticsPluginExtension>{
            endpoint.set("{{ .Analytics.Endpoint }}:{{ .Analytics.Port }}")
            httpEndpoint.set("{{ .Analytics.HttpEndpoint }}")
            authToken.set("{{ .AuthToken }}")
            dumpEventsToFiles.set({{ .IsDebugEnabled }})
            debug.set({{ .IsDebugEnabled }})

            providerName.set("{{ .Cache.Metadata.CIProvider }}")

            bitrise {
                {{- if .AppSlug }}
                appSlug.set("{{ .AppSlug }}")
                {{- end }}
            }
        }
    }
    {{- end }}
}
{{- if .TestDistro.Enabled }}
rootProject {
    extensions.create("rbe", io.bitrise.gradle.rbe.RBEPluginExtension::class.java).with {
        endpoint.set("{{ .TestDistro.Endpoint }}:{{ .TestDistro.Port }}")
        kvEndpoint.set("{{ .TestDistro.KvEndpoint }}:{{ .TestDistro.Port }}")
        authToken.set("{{ .AuthToken }}")
        logLevel.set("{{ .TestDistro.LogLevel }}")
        bitrise {
            appSlug.set("{{ .AppSlug }}")
        }
    }

    apply<io.bitrise.gradle.rbe.RBEPlugin>()
}
{{- end }}
