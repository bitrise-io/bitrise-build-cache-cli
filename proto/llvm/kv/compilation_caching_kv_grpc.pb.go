//===--- compilation_caching_kv.proto - Key/Value service definition ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: llvm/kv/compilation_caching_kv.proto

package llvmkv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyValueDB_GetValue_FullMethodName = "/compilation_cache_service.keyvalue.v1.KeyValueDB/GetValue"
	KeyValueDB_PutValue_FullMethodName = "/compilation_cache_service.keyvalue.v1.KeyValueDB/PutValue"
)

// KeyValueDBClient is the client API for KeyValueDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the service.
type KeyValueDBClient interface {
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	PutValue(ctx context.Context, in *PutValueRequest, opts ...grpc.CallOption) (*PutValueResponse, error)
}

type keyValueDBClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueDBClient(cc grpc.ClientConnInterface) KeyValueDBClient {
	return &keyValueDBClient{cc}
}

func (c *keyValueDBClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, KeyValueDB_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueDBClient) PutValue(ctx context.Context, in *PutValueRequest, opts ...grpc.CallOption) (*PutValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutValueResponse)
	err := c.cc.Invoke(ctx, KeyValueDB_PutValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueDBServer is the server API for KeyValueDB service.
// All implementations must embed UnimplementedKeyValueDBServer
// for forward compatibility.
//
// Interface exported by the service.
type KeyValueDBServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	PutValue(context.Context, *PutValueRequest) (*PutValueResponse, error)
	mustEmbedUnimplementedKeyValueDBServer()
}

// UnimplementedKeyValueDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyValueDBServer struct{}

func (UnimplementedKeyValueDBServer) GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedKeyValueDBServer) PutValue(context.Context, *PutValueRequest) (*PutValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutValue not implemented")
}
func (UnimplementedKeyValueDBServer) mustEmbedUnimplementedKeyValueDBServer() {}
func (UnimplementedKeyValueDBServer) testEmbeddedByValue()                    {}

// UnsafeKeyValueDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueDBServer will
// result in compilation errors.
type UnsafeKeyValueDBServer interface {
	mustEmbedUnimplementedKeyValueDBServer()
}

func RegisterKeyValueDBServer(s grpc.ServiceRegistrar, srv KeyValueDBServer) {
	// If the following call pancis, it indicates UnimplementedKeyValueDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyValueDB_ServiceDesc, srv)
}

func _KeyValueDB_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueDBServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueDB_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueDBServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueDB_PutValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueDBServer).PutValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueDB_PutValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueDBServer).PutValue(ctx, req.(*PutValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueDB_ServiceDesc is the grpc.ServiceDesc for KeyValueDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compilation_cache_service.keyvalue.v1.KeyValueDB",
	HandlerType: (*KeyValueDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _KeyValueDB_GetValue_Handler,
		},
		{
			MethodName: "PutValue",
			Handler:    _KeyValueDB_PutValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "llvm/kv/compilation_caching_kv.proto",
}
