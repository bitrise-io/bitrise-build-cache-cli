//===--- compilation_caching_cas.proto - CAS service definition -----------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: llvm/cas/compilation_caching_cas.proto

package llvmcas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CASDBService_Get_FullMethodName  = "/compilation_cache_service.cas.v1.CASDBService/Get"
	CASDBService_Put_FullMethodName  = "/compilation_cache_service.cas.v1.CASDBService/Put"
	CASDBService_Load_FullMethodName = "/compilation_cache_service.cas.v1.CASDBService/Load"
	CASDBService_Save_FullMethodName = "/compilation_cache_service.cas.v1.CASDBService/Save"
)

// CASDBServiceClient is the client API for CASDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the service.
type CASDBServiceClient interface {
	Get(ctx context.Context, in *CASGetRequest, opts ...grpc.CallOption) (*CASGetResponse, error)
	Put(ctx context.Context, in *CASPutRequest, opts ...grpc.CallOption) (*CASPutResponse, error)
	Load(ctx context.Context, in *CASLoadRequest, opts ...grpc.CallOption) (*CASLoadResponse, error)
	Save(ctx context.Context, in *CASSaveRequest, opts ...grpc.CallOption) (*CASSaveResponse, error)
}

type cASDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCASDBServiceClient(cc grpc.ClientConnInterface) CASDBServiceClient {
	return &cASDBServiceClient{cc}
}

func (c *cASDBServiceClient) Get(ctx context.Context, in *CASGetRequest, opts ...grpc.CallOption) (*CASGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CASGetResponse)
	err := c.cc.Invoke(ctx, CASDBService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cASDBServiceClient) Put(ctx context.Context, in *CASPutRequest, opts ...grpc.CallOption) (*CASPutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CASPutResponse)
	err := c.cc.Invoke(ctx, CASDBService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cASDBServiceClient) Load(ctx context.Context, in *CASLoadRequest, opts ...grpc.CallOption) (*CASLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CASLoadResponse)
	err := c.cc.Invoke(ctx, CASDBService_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cASDBServiceClient) Save(ctx context.Context, in *CASSaveRequest, opts ...grpc.CallOption) (*CASSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CASSaveResponse)
	err := c.cc.Invoke(ctx, CASDBService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CASDBServiceServer is the server API for CASDBService service.
// All implementations must embed UnimplementedCASDBServiceServer
// for forward compatibility.
//
// Interface exported by the service.
type CASDBServiceServer interface {
	Get(context.Context, *CASGetRequest) (*CASGetResponse, error)
	Put(context.Context, *CASPutRequest) (*CASPutResponse, error)
	Load(context.Context, *CASLoadRequest) (*CASLoadResponse, error)
	Save(context.Context, *CASSaveRequest) (*CASSaveResponse, error)
	mustEmbedUnimplementedCASDBServiceServer()
}

// UnimplementedCASDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCASDBServiceServer struct{}

func (UnimplementedCASDBServiceServer) Get(context.Context, *CASGetRequest) (*CASGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCASDBServiceServer) Put(context.Context, *CASPutRequest) (*CASPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCASDBServiceServer) Load(context.Context, *CASLoadRequest) (*CASLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedCASDBServiceServer) Save(context.Context, *CASSaveRequest) (*CASSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedCASDBServiceServer) mustEmbedUnimplementedCASDBServiceServer() {}
func (UnimplementedCASDBServiceServer) testEmbeddedByValue()                      {}

// UnsafeCASDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CASDBServiceServer will
// result in compilation errors.
type UnsafeCASDBServiceServer interface {
	mustEmbedUnimplementedCASDBServiceServer()
}

func RegisterCASDBServiceServer(s grpc.ServiceRegistrar, srv CASDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedCASDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CASDBService_ServiceDesc, srv)
}

func _CASDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CASDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CASDBService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CASDBServiceServer).Get(ctx, req.(*CASGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CASDBService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CASDBServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CASDBService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CASDBServiceServer).Put(ctx, req.(*CASPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CASDBService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CASDBServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CASDBService_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CASDBServiceServer).Load(ctx, req.(*CASLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CASDBService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CASDBServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CASDBService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CASDBServiceServer).Save(ctx, req.(*CASSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CASDBService_ServiceDesc is the grpc.ServiceDesc for CASDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CASDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compilation_cache_service.cas.v1.CASDBService",
	HandlerType: (*CASDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CASDBService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _CASDBService_Put_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _CASDBService_Load_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _CASDBService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "llvm/cas/compilation_caching_cas.proto",
}
